
<%args>
$organism_ref => undef
$lg_names_ref => undef
$gc_root_accession => "T3:T3_GC_ROOT"
$gc_root_title => "T3 Genetic Character Categories"
</%args>

<!-- const GC_ROOT = "T3:T3_GC_ROOT"; -->
<!-- const GC_ROOT = "TO:0000387"; -->

<& /util/import_javascript.mas, classes => [ 'jquery', 'jquery.dataTables' ] &>

<div class="container-fluid">

<& /page/page_title.mas, title=>'Search Genes and Loci' &>

<%perl>

use CXGN::Page::FormattingHelpers qw / html_optional_show info_table_html conditional_like_input_html simple_selectbox_html/;


my $any_name_select = conditional_like_input_html("any_name","contains", "", '30');
    

my $organism = simple_selectbox_html( 
 choices  =>  $organism_ref   ,
 id       => "common_name",
);
    
  
my $linkage_group_select = simple_selectbox_html(
   choices => $lg_names_ref,
   id      => "locus_linkage_group",
);
    
       
no warnings 'uninitialized';

my $advanced_search=  info_table_html(
  'Organism'   => $organism,
  'Chromosome / Linkage&nbsp;Group' => $linkage_group_select,
  'Locus editor' =>qq|<input class="form-control" type="text" id="locus_editor" size="20"/>|,
  'Show only genes with' => qq | <input type="checkbox" id="has_sequence"  />sequence <br />
				<input type="checkbox" id="has_marker" />markers<br />
				<input type="checkbox" id="has_annotation" />GO/PO annotation<br /> |,
	
      'Phenotype'  => qq|<input class="form-control" type="text" id="phenotype" size="30" /><a href="/search/phenotypes"> [Advanced SGN phenotype search]</a>|,
      'Ontology term' => qq|<input class="form-control" type="text" id="ontology_term" placeholder="Term name or ID: e.g. 'carotenoid' or 'PO:0007010'"/>
             <!--<br /><span class="ghosted">(Term name or ID: e.g. 'carotenoid' or 'PO:0007010')</span>-->|,
      'Genbank ID' =>qq|<input class="form-control" type="text" id="genbank_accession" placeholder="Accession or GI: e.g. 'EF091820' or '118185006'"/>
             <!--<br /><span class="ghosted">(Accession or GI: e.g. 'EF091820' or '118185006')</span>-->|,   
      __border   =>1,
      __multicol =>2,
      __tableattrs => 'width="100%"',
      );

</%perl>


<&| /page/info_section.mas, title => 'Search', collapsible=>1, collapsed=>0, subtitle=>'[<a href="../help/gene_search_help.pl">Gene Search Help</a>]' &>

<div class="well" id="locus_search_form">

  <div class="form-horizontal" >
    <div class="form-group">
      <label class="col-sm-3 control-label">Search for any gene, locus, or allele:</label>
      <div class="col-sm-9" >
        <% $any_name_select %>
      </div>
    </div>
% if ( $gc_root_accession ) {
    <div class="form-group">
      <label class="col-sm-3 control-label">Filter by category:</label>
      <div id="filter-ontology" class="col-sm-9">
      </div>
    </div>
% }
    <div class="container-fluid" align="center">
      <br/>
      <ul class="list-inline" >
        <li style="padding-bottom:5px"><button class="btn btn-primary" id="submit_locus_search" />Search</button></li>
	<li style="padding-bottom:5px"><a class="btn btn-info" href="/locus/0/new/" style="color:#fff" >Submit New Locus</a></li>
	<li style="padding-bottom:5px"><input class="btn btn-default" type="button" value="Advanced Search Options" id="show_advanced_search" /></li>
      </ul>
    </div>
  </div>

<!--
<table>
  <tr>
    <td colspan="2"><b>Search for any gene, locus, or allele</b>  (<a href="../help/gene_search_help.pl">gene search help page</a>)</td></tr>
  <tr><td><% $any_name_select %></td>
    <td><div align="center"><button id="submit_locus_search" />Search</button></div></td>
   <tr><td><a href="/locus/0/new/">[Submit new locus]</a></td></tr>
</tr></table>
<br />
-->

<div id="advanced_search_div" style="display:none;">
   <&| /page/info_section.mas, title    => 'Advanced Options' &>
     <% $advanced_search %>
   </&>
</div>

</div>

</&>

</div>


<&| /page/info_section.mas, title => 'Search Results', collapsible=>1, collapsed=>0 &>


<div class="well">
<table id="locus_search_results" class="display">
<thead>
  <tr>
    <th>Organism</th>
    <th>Locus Name</th>
    <th>Locus Symbol</th>
    <th>Alleles</th>
  </tr>
</thead>
</table>
</div>

</&>


<& /util/import_css.mas, paths => ['/documents/inc/datatables/jquery.dataTables.css'] &>



<script>

jQuery(document).ready(function () {

   var table = jQuery('#locus_search_results').DataTable( { 
   
     'searching' : false,
     'ordering'  : false,
     'processing': true,
     'serverSide': true,
     'ajax': { 'url':  '/ajax/search/loci',
               'data': function(d) { 
                  d.any_name  = jQuery('#any_name').val();
                  d.any_name_matchtype = jQuery('#any_name_matchtype').val();
                  d.common_name  = jQuery('#common_name').val(); 
                  d.phenotype  = jQuery('#phenotype').val(); 
                  d.linkage_group  = jQuery('#locus_linkage_group').val(); 
                  d.ontology_term  = jQuery('#ontology_term').val(); 
                  d.locus_editor  = jQuery('#locus_editor').val(); 
                  d.genbank_accession  = jQuery('#genbank_accession').val();
                  d.has_sequence  = jQuery('#has_sequence').is(':checked');
                  d.has_marker  = jQuery('#has_marker').is(':checked'); 
                  d.has_annotation  = jQuery('#has_annotation').is(':checked'); 
             }
         }
     });


   jQuery('#submit_locus_search').click( function() { 
         var common_name  = jQuery('#common_name').val(); 
         var phenotype    = jQuery('#phenotype').val(); 
         var linkage      = jQuery('#locus_linkage_group').val(); 
         var ontology     = jQuery('#ontology_term').val(); 
         var editor       = jQuery('#locus_editor').val(); 
         var genbank      = jQuery('#genbank_accession').val();
         var has_sequence     = jQuery('#has_sequence').is(':checked');
         var has_marker       = jQuery('#has_marker').is(':checked'); 
         var has_annotation   = jQuery('#has_annotation').is(':checked'); 
       
         if (  phenotype.trim().length  || common_name.length || ontology.trim().length || editor.trim().length || genbank.trim().length || has_sequence || has_marker || has_annotation ) {
             jQuery('#advanced_search_div').show();
         } else {
             jQuery('#advanced_search_div').hide()
         }
         table.search("locus_search_results").draw();
   });
  
   jQuery('#locus_search_form').keypress( function( e ) {
           var code = e.keyCode || e.which;
           if( code == 13 ) {
                jQuery('#submit_locus_search').click();
           }
    } );


   jQuery('#show_advanced_search').click( function() {
        if (false == jQuery('#advanced_search_div').is(':visible')) {
             jQuery('#advanced_search_div').show();
        }
        else {
             jQuery('#advanced_search_div').hide();
       }
   } );

% if ( $gc_root_accession ) {
   loadFilterOntology();
% }
    
});


/**
 * Load the Genes/Loci filter ontology
 * and build the select box
 */
function loadFilterOntology() {
  getOntologyChildren(
    {
      accession: "<% $gc_root_accession %>",
      title: "<% $gc_root_title %>"
    }, 
    function(onto) {
      buildFilterSelect(onto);
    }
  );
}


/**
 * Build the filter select box with the processed ontology
 * @param  {Object} onto Processed filter ontology
 */
function buildFilterSelect(onto) {
  let options = _buildFilterSelectTerm(onto, 0, [{
    value: '',
    title: '--SELECT ONTOLOGY TERM--',
    disabled: false
  }]);
  let html = "<select id='filter-ontology-select' class='form-control'>";
  for ( let i = 0; i < options.length; i++ ) {
    html += "<option value='" + options[i].value + "'";
    if ( options[i].disabled ) html += " disabled";
    html += ">" + options[i].title + "</option>";
  }
  html += "</select>";

  jQuery("#filter-ontology").html(html);
}

/**
 * Build the select options for the specified term
 * @param  {Object}  term    Ontology term
 * @param  {int}     level   Level of the term in the term heirarchy
 * @param  {Obect[]} options Already processed options
 * @return {[type]}          Processed options with the current term added
 */
function _buildFilterSelectTerm(term, level, options) {
  let value = term.accession;
  let title = "";
  for ( let i = 0; i < level; i++ ) {
    title += "&nbsp;&nbsp;";
  }
  title += term.title;
  let has_children = term.children && term.children.length > 0;

  let option = {
    value: value,
    title: title,
    disabled: has_children
  };

  options.push(option);

  if ( has_children ) {
    for ( let i = 0; i < term.children.length; i++ ) {
      _buildFilterSelectTerm(term.children[i], level+1, options);
    }
  }

  return options;
}


/**
 * Recursively get all of the children ontology terms of the 
 * specified parent term and add the children as the 'children' 
 * property to the parent term
 * @param  {Object}   term     Parent Ontology Term
 * @param  {Function} callback Callback function(term)
 */
function getOntologyChildren(term, callback) {
  jQuery.ajax({
    url: "/ajax/onto/children?node=" + term.accession,
    success: function(results) {
      if ( results && Array.isArray(results) && results.length > 0 ) {
        let children = [];
        _processChild(results, 0, term, children, callback);
      }
      else {
        callback(term);
      }
    }
  });
}

/**
 * Start processing an ontology child term
 * @param  {Object[]} results  List of children terms
 * @param  {int}      count    Index of current child to process
 * @param  {Object}   parent   Parent term
 * @param  {Object[]} children Array of processed children
 * @param  {Function} callback Final callback function(term)
 */
function _processChild(results, count, parent, children, callback) {
  
  // Set the child properties
  let child = {
    accession: results[count].accession,
    title: results[count].cvterm_name
  };

  // Get the children of the child, if it has children
  if ( results[count].has_children ) {
    getOntologyChildren(child, function(term) {
      children.push(term);
      _finish();
    });
  }

  // Finish processing the child
  else {
    children.push(child);
    _finish();
  }

  /**
   * Finish processing the child: process the next child
   * or return to the callback with the parent term
   */
  function _finish(term) {
    if ( count < results.length-1 ) {
      _processChild(results, count+1, parent, children, callback);
    }
    else {
      parent.children = children;
      return callback(parent);
    }
  }
}
  
</script>
