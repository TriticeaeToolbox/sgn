<& '/page/page_title.mas', title => "Trial Summary" &>

<& '/util/import_css.mas', paths => ['tools/trial_summary.css'] &>

<& '/util/import_javascript.mas', classes => [ 'jquery', 'jqueryui', 'popup', 'jquery.dataTables-buttons-min', 'buttons.bootstrap-min', 'buttons.html5-min', 'buttons.print-min'] &>

<div class="tsr-loading">
  <p>
    Generating Summary Tables...
  </p>
  <img id="results-loading-spinner" src="/img/wheel.gif" alt="loading">
</div>

<div class="tsr-error">
  <div class="alert">
    <strong>Error!</strong> <span id="error-text"></span>
  </div>
</div>

<div class="tsr-results">
  <div id="results"></div>
</div>


<script>

  // Get query params
  const urlParams = new URLSearchParams(window.location.search);
  const trials_list_id = urlParams.get('trials_list_id');
  const trait_ids = urlParams.getAll('trait_id');


  /**
   * On Page Load:
   *  set element display
   *  request summary info
   */
  jQuery(document).ready(function(){
    jQuery(".tsr-error").hide();
    jQuery(".tsr-results").hide();
    jQuery(".tsr-loading").show();
    requestSummaryInformation(trials_list_id, trait_ids);
  });


  /**
   * Request trial summary information for the specified trials and traits
   * @param  {string} trials_list_id Trials List ID
   * @param  {string[]} trait_ids    Array of Trait IDs
   */
  function requestSummaryInformation(trials_list_id, trait_ids) {

    // Check parameters before making request
    if ( !trials_list_id || trials_list_id === "" ) {
      return error("The trials list id must be specified!");
    }
    if ( !trait_ids || trait_ids.length === 0 ) {
      return error("One or more trait ids must be specified!");
    }

    // Build URL for AJAX request
    let url = "/ajax/analyze/trial_trait_summary";
    url += "?trials_list_id=" + trials_list_id;
    for ( let i = 0; i < trait_ids.length; i++ ) {
      url += "&trait_id=" + trait_ids[i];
    }

    // Make AJAX request for summary info
    jQuery.ajax({ 
      url: url,
      contentType: "application/json",
      success: function(response) { 
        if ( response.error ) {
          error(response.error);
        }
        else {
          display(response);
        }
      },
      error: function(response) { 
        error("Could not generate trial summary tables due to a server error.  Please try again later.");
      }
    });

  }

  /**
   * Display an error message
   * @param  {string} message Error Message
   */
  function error(message) {
    jQuery(".tsr-loading").hide();
    jQuery(".tsr-results").hide();
    jQuery("#error-text").html(message);
    jQuery(".tsr-error").show();
  }


  /**
   * Display the summary response
   * @param  {Object} response Response from AJAX call
   */
  function display(response) {

    // Parse response
    let trait_info = response.overall.lsmeans_metadata;
    let lsmeans_results = response.overall.lsmeans;
    let trait_results = response.traits;
    let trials = Object.keys(trait_results[trait_info[0].trait_code].results[0]).filter(function(e) { return e !== 'accession'}).sort();

    // Init LS Means Table
    let html = "<h3>LS Means</h3>";
    html += "<table id='table-overall' class='tsr-table table table-hover table-striped table-bordered' width='100%'>";
    html += "<thead><tr>";
    html += "<th>Accession</th>";
    for ( let i = 0; i < trait_info.length; i++ ) {
      html += "<th>" + trait_info[i].trait_name + "</th>";
    }
    html += "</tr></thead>";

    // Add footer with Trait LSD and HSD
    html += "<tfoot>";
    html += "<tr>";
    html += "<td>LSD</td>";
    for ( let i = 0; i < trait_info.length; i++ ) {
      let value = "--";
      if ( trait_info[i].lsd !== "NA" ) {
        value = parseFloat(trait_info[i].lsd).toFixed(2);
      }
      html += "<td>" + value + "</td>";
    }
    html += "</tr>";
    html += "<tr>";
    html += "<td>HSD</td>";
    for ( let i = 0; i < trait_info.length; i++ ) {
      let value = "--";
      if ( trait_info[i].lsd !== "NA" ) {
        value = parseFloat(trait_info[i].hsd).toFixed(2);
      }
      html += "<td>" + value + "</td>";
    }
    html += "</tr>";
    html += "</tfoot>";
    html += "</table>";

    // Init Each Trait Table
    for ( let i = 0; i < trait_info.length; i++ ) {
      let results = trait_results[trait_info[i].trait_code].results;

      html += "<br /><br />";
      html += "<h3>" + trait_info[i].trait_name + "</h3>";
      html += "<table id='table-" + trait_info[i].trait_code + "' class='tsr-table table table-hover table-striped table-bordered' width='100%'>";
      html += "<thead><tr>";
      html += "<th>Accession</th>";
      for ( let j = 0; j < trials.length; j++ ) {
        html += "<th>" + trials[j] + "</th>";
      }
      html += "</tr></thead>";

      // Add footer with Trial Means
      html += "<tfoot>";
      html += "<tr>";
      html += "<td>Trial Mean</td>";
      for ( let i = 0; i < trials.length; i++ ) {
        html += "<td>" + parseFloat(results[results.length-1][trials[i]]).toFixed(2) + "</td>";
      }
      html += "</tr>";

      html += "</table>";
    }


    // Add HTML
    jQuery("#results").html(html);
    jQuery(".tsr-loading").hide();
    jQuery(".tsr-error").hide();
    jQuery(".tsr-results").show();

    // Setup LS Means Columns
    let lsmeans_columns = [];
    lsmeans_columns.push({data: "accession"});
    for ( let i = 0; i < trait_info.length; i++ ) {
      lsmeans_columns.push({
        data: function(row, type, val, meta) {
          let rtn = row[trait_info[i].trait_code];
          return rtn === "NA" ? "--" : parseFloat(rtn).toFixed(2);
        }
      });
    }

    // Setup LS Means Table Properties
    let table = jQuery("#table-overall").DataTable({
      data: lsmeans_results,
      columns: lsmeans_columns,
      lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
      buttons: ['copy', {extend: 'csv', title: 'LSMeans'}, {extend: 'print', title: 'LSMeans'}],
      dom: "lBfrtip"
    });


    // Setup Each Trait Table
    for ( let i = 0; i < trait_info.length; i++ ) {

      // Setup Trait Columns
      let trait_columns = [];
      trait_columns.push({data: "accession"});
      for ( let j = 0; j < trials.length; j++ ) {
        trait_columns.push({
          data: function(row, type, val, meta) {
            let rtn = row[trials[j]];
            console.log(rtn);
            return rtn === "NA" ? "--" : parseFloat(rtn).toFixed(2);
          }
        });
      }

      // Setup Trait Table Properties
      let trait_table = jQuery("#table-" + trait_info[i].trait_code).DataTable({
        data: trait_results[trait_info[i].trait_code].results.slice(0, -1),
        columns: trait_columns,
        scrollX: 600,
        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
        buttons: ['copy', {extend: 'csv', title: trait_info[i].trait_name}, {extend: 'print', title: trait_info[i].trait_name}],
        dom: "lBfrtip"
      });

    }

  }
</script>
