
<%args>
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery.iframe-post-form', 'CXGN.BreederSearch', 'd3.d3v4Min.js', "opencv.opencv" ] &>

<style>
.ui-autocomplete { z-index:2147483647; }

.straightLine, .hrLine{
  position: absolute;
  background-color: red;
  transition: transform .05s ease-in-out;
}
</style>

<div id="manage_drone_imagery_top_div">

    <& /page/page_title.mas, title=>"Manage Drone Imagery" &>

<%perl>
#my $buttons_html = "<button class='btn btn-primary' style='margin:3px' id='upload_drone_imagery_link'>Upload Drone Imagery</button><button class='btn btn-primary' style='margin:3px' id='keras_cnn_drone_imagery_link'>Train Keras CNN Model</button><button class='btn btn-success' style='margin:3px' id='download_phenotypes_drone_imagery_link'>Download Drone Phenotypes</button>";
my $buttons_html = "<button class='btn btn-primary' style='margin:3px' id='upload_drone_imagery_link'>Upload Imagery</button><button class='btn btn-success' style='margin:3px' id='download_phenotypes_drone_imagery_link'>Download Image-Phenotypes</button><button class='btn btn-success' style='margin:3px' id='drone_imagery_calculate_statistics_link'>Calculate Statistics</button>";
</%perl>

    <& /page/detail_page_2_col_section.mas, info_section_collapsed => 0, info_section_title => "<h4 style='display:inline'>Drone Imagery</h4>", info_section_subtitle => 'Upload and view field drone imagery', buttons_html => $buttons_html, icon_class => undef, col1_width_class => "col-sm-0", col2_width_class => "col-sm-12", info_section_id => "manage_drone_imagery_main" &>

</div>

<div id="manage_drone_imagery_standard_process_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Run A Standard Process" &>

    <&| /util/workflow.mas, id=> "manage_drone_imagery_standard_process_workflow" &>
        <&| /util/workflow.mas:step, title=> "Intro" &>
            <& /page/page_title.mas, title=>"This workflow will guide you through applying a standard process to your aerial imaging bands" &>
            <p>Here you can take one of the drone run bands you uploaded all the way through the process to plot image saving. This will require manual steps such as image rotation, cropping, and plot polygon templating. After you have completed this process for one drone run band, you can apply it to all other drone run bands and other calculated vegetative indices.</p>
            <br/><br/>
            <center>
            <button class="btn btn-primary" onclick="Workflow.complete(this); return false;">Go to Next Step</button>
            </center>
        </&>
        <&| /util/workflow.mas:step, title=> "Drone Run Band" &>
            <& /page/page_title.mas, title=>"Select a drone run band" &>

            <div class="well well-sm">
                <p>Please select one drone run band to take through the process. It is recommended to select a band that has high contrast, such as a NIR band.</p>
            </div>

            <div class="well well-sm">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <table class="table table-bordered table-hover" id="manage_drone_imagery_standard_process_drone_run_bands_table">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Drone Run Band Name</th>
                                    <th>Drone Run Band Description</th>
                                    <th>Drone Run Band Type</th>
                                    <th>Drone Run Name</th>
                                    <th>Drone Run Description</th>
                                    <th>Drone Run Date</th>
                                    <th>Field Trial Name</th>
                                    <th>Field Trial Description</th>
                                </tr>
                            </thead>
                        </table>

                        <br/>

                        <center>
                        <button class="btn btn-primary" id="manage_drone_imagery_standard_process_drone_run_band_step">Go to Next Step</button>
                        </center>
                    </div>
                </div>
            </div>

        </&>
        <&| /util/workflow.mas:step, title=> "Rotate" &>
            <& /page/page_title.mas, title=>"Rotate your selected drone run band" &>

            <div class="well well-sm">
                <ul>
                    <li>Here you can do a rotation of your drone run image.</li>
                    <li>Your image should have precise row-to-row parallel alignment.</li>
                </ul>
            </div>

            <div class="well well-sm">

                <form class="form-horizontal">
                    <div class="form-group form-group-sm">
                        <label class="col-sm-6 control-label">Rotate Counter-Clockwise Degrees: </label>
                        <div class="col-sm-6">
                            <input class="form-control" id="drone_imagery_standard_process_rotate_degrees_input" name="drone_imagery_standard_process_rotate_degrees_input" type="text" placeholder="Number of degrees to rotate" value="0.00"/>
                        </div>
                    </div>
                </form>

                <button class="btn btn-primary" id="drone_imagery_standard_process_rotate_stitched_view">Rotate Image (Does Not Save)</button>
                <button class="btn btn-default" id="drone_imagery_standard_process_rotate_stitched_crosshairs">Draw Crosshairs Assist</button>
                <button class="btn btn-default" id="drone_imagery_standard_process_rotate_stitched_restart">Restart</button>
                <button class="btn btn-primary" id="manage_drone_imagery_standard_process_rotate_step">Save Rotated Image And Go To Next Step</button>
            </div>

            <div id="manage_drone_imagery_standard_process_rotate_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_rotate_original_stitched_div">
            </canvas>

        </&>
        <&| /util/workflow.mas:step, title=> "Cropping" &>
            <& /page/page_title.mas, title=>"Crop your drone run band to specific area" &>

            <div class="well well-sm">
                <ul>
                    <li>Here you can do a rough cropping of the stitched ortho image to focus only on the actual field experiment.</li>
                    <li>Click on four points in the image to make a four-sided polygon.</li>
                    <li>Only the last polygon that you draw will be used for the cropping.</li>
                </ul>
                <br/>
                <button class="btn btn-primary" id="manage_drone_imagery_standard_process_cropping_step">Save and Go to Next Step</button>
            </div>

            <!--
            <div class="well well-sm">
                <form class="form-horizontal">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Previously Used Image Cropping For This Field Trial: </label>
                                <div class="col-sm-6">
                                    <div id="plot_polygons_standard_process_previously_saved_image_cropping_templates">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
                <button class="btn btn-primary" id="drone_imagery_standard_process_cropping_use_previous_cropping">Use Image Cropping</button>
            </div>
            -->

            <div id="manage_drone_imagery_standard_process_crop_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_crop_original_stitched_div"></canvas>

        </&>
        <&| /util/workflow.mas:step, title=> "Thresholding" &>
            <& /page/page_title.mas, title=>"Threshold your drone run band to remove background" &>

            <div class="well">
                <&| /page/info_section.mas, title => 'Remove Background Using Percentage Threshold', collapsible=>1, collapsed => 0, subtitle=> 'Remove the background by specifying percentage threshold value' &>
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-sm-6 control-label">Discard Lowest Percent of Pixel Values: </label>
                                        <div class="col-sm-6">
                                            <input class="form-control" id="drone_imagery_standard_process_remove_background_lower_threshold_percentage" name="drone_imagery_standard_process_remove_background_lower_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of lowest pixel values (Min 0, Max 100)" value=25 disabled/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-sm-6 control-label">Discard Highest Percent of Pixel Values: </label>
                                        <div class="col-sm-6">
                                            <input class="form-control" id="drone_imagery_standard_process_remove_background_upper_threshold_percentage" name="drone_imagery_standard_process_remove_background_upper_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of highest pixel values (Min 0, Max 100)" value=25 disabled/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </&>
            </div>

            <center>
                <button id="drone_imagery_standard_process_remove_background_defined_percentage_submit" class="btn btn-primary">Apply Threshold</button>
            </center>

            <hr>

            <div id="manage_drone_imagery_standard_process_remove_background_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <div class="well well-sm">
                <&| /page/info_section.mas, title => 'Histogram of pixel values', collapsible=>1, collapsed => 0, subtitle=> 'Histogram of Pixel Values' &>
                    <center>
                        <canvas id="drone_imagery_standard_process_remove_background_histogram_div"></canvas>
                    </center>
                </&>
            </div>

            <div class="well well-sm">
                <&| /page/info_section.mas, title => 'Denoised Original Image', collapsible=>1, collapsed => 0, subtitle=> 'Denoised Original Image' &>
                    <center>
                        <canvas id="drone_imagery_standard_process_remove_background_original"></canvas>
                    </center>
                </&>
            </div>

        </&>
        <&| /util/workflow.mas:step, title=> "Plot Polygons" &>
            <& /page/page_title.mas, title=>"Define plot polygons relative to the field layout" &>

            <& /page/detail_page_2_col_section.mas, info_section_collapsible=>1, info_section_collapsed=>0, info_section_title => "<h4 style='display:inline'>Generate Polygon Template Tool</h4>", info_section_subtitle => 'Overlay a uniform grid over the image.', icon_class => "glyphicon glyphicon-th-large", info_section_id => "manage_drone_imagery_standard_process_generate_plot_polygons_section" &>

            <div class="well well-sm">
                <div id="drone_imagery_standard_process_plot_polygons_top_section"></div>

                <button id="drone_imagery_standard_process_plot_polygons_clear" class="btn btn-danger">Clear All Polygons</button>
                <button id="drone_imagery_standard_process_plot_polygons_clear_one" class="btn btn-danger">Clear One Polygon</button>
                <button id="drone_imagery_standard_process_plot_polygons_get_distance" class="btn btn-default">Find Distance Between Points</button>
            </div>

            <div id="manage_drone_imagery_standard_process_plot_polygons_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_plot_polygons_original_stitched_div"></canvas>

            <div id="drone_imagery_standard_process_generated_polygons_div"></div>

            <hr>
            <div class="well well-sm">
                <div id="drone_imagery_standard_process_trial_layout_div"></div>
            </div>

        </&>
        <&| /util/workflow.mas:step, title=> "Apply" &>
            <& /page/page_title.mas, title=>"Apply these same steps to other drone run bands in the current drone run" &>

            <div class="well well-sm">
                <ul>
                    <li>Here you can apply the same actions you did for the previous steps 1 to 6, to additional drone run bands in this drone run.</li>
                    <li>Thresholding will be done dynamically, by removing the top and bottom 20% of pixel values.</li>
                </ul>
            </div>

            <div class="well well-sm">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <table class="table table-bordered table-hover" id="manage_drone_imagery_standard_process_drone_run_bands_apply_table">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Drone Run Band Name</th>
                                    <th>Drone Run Band Description</th>
                                    <th>Drone Run Band Type</th>
                                    <th>Drone Run Name</th>
                                    <th>Drone Run Description</th>
                                    <th>Drone Run Date</th>
                                    <th>Field Trial Name</th>
                                    <th>Field Trial Description</th>
                                </tr>
                            </thead>
                        </table>

                        <br/>

                        <center>
                        <button class="btn btn-primary" id="manage_drone_imagery_standard_process_drone_run_band_apply_step">Go to Next Step</button>
                        </center>
                    </div>
                </div>
            </div>
        </&>
        <&| /util/workflow.mas:step, title=> "Indices" &>
            <& /page/page_title.mas, title=>"Create and apply these same steps to vegetative indices" &>

            <form class="form-horizontal">
                <div class="form-group form-group-sm">
                    <label class="col-sm-6 control-label">Vegetative Indices To Apply: </label>
                    <div class="col-sm-6">
                        <input name="drone_imagery_standard_process_apply_indices_select" value="TGI" type="checkbox" checked> Triangular Greenness Index (TGI) <br/>
                        <input name="drone_imagery_standard_process_apply_indices_select" value="VARI" type="checkbox" checked> Visible Atmospheric Resistant Index (VARI) <br/>
                        <input name="drone_imagery_standard_process_apply_indices_select" value="NDVI" type="checkbox" checked> Normalized Difference Vegetative Index (NDVI) <br/>
                        <input name="drone_imagery_standard_process_apply_indices_select" value="NDRE" type="checkbox" checked> Normalized Difference Red Edge Vegetative Index (NDRE) <br/>
                    </div>
                </div>
            </form>

            <br/>

            <center>
            <button type="button" class="btn btn-primary" id="manage_drone_imagery_standard_process_indices_step">Go to Next Step</button>
            </center>
        </&>
        <&| /util/workflow.mas:step, title=> "Phenotypes" &>
            <& /page/page_title.mas, title=>"Calculate phenotypes for all plot polygon images" &>

            <form class="form-horizontal">
                <div class="form-group form-group-sm">
                    <label class="col-sm-6 control-label">Zonal Statistics to Calculate and Save in Database: </label>
                    <div class="col-sm-6">
                        <input name="drone_imagery_standard_process_phenotypes_select" value="zonal" type="checkbox" checked disabled> Zonal Statistics: nonzero_pixel_count, total_pixel_sum, mean_pixel_value, harmonic_mean_value, median_pixel_value, variance_pixel_value, stdev_pixel_value, pstdev_pixel_value, min_pixel_value, max_pixel_value, minority_pixel_value, minority_pixel_count, majority_pixel_value, majority_pixel_count, pixel_variety_count <br/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Select Time Point In Drone Run Series:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_standard_process_calculate_phenotypes_zonal_stats_time_select_div">
                        </div>
                    </div>
                </div>
            </form>
            <br/>

            <div id="drone_imagery_standard_process_week_term_div"></div>

            <center>
            <button type="button" class="btn btn-info" id="manage_drone_imagery_standard_process_phenotypes_step">Finish</button>
            </center>
        </&>
    </&>

</div>

<div id="manage_drone_imagery_rotate_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Rotate Stitched Image" &>

    <div class="well well-sm">
        <ul>
            <li>Here you can rotate the stitched image so that the rows and columns align exactly vertically and horizontally.</li>
            <li>The rotation can be done on decimals of degrees.</li>
            <li>Negative values mean clock-wise and positive values mean counter-clockwise.</li>
            <li>Crosshairs are only for assisting in alignment and they will not be saved.</li>
        </ul>
    </div>
    <div class="well well-sm">

        <form class="form-horizontal">
            <div class="form-group form-group-sm">
                <label class="col-sm-6 control-label">Rotate Counter-Clockwise Degrees: </label>
                <div class="col-sm-6">
                    <input class="form-control" id="drone_imagery_rotate_degrees_input" name="drone_imagery_rotate_degrees_input" type="text" placeholder="Number of degrees to rotate" value="0.00"/>
                </div>
            </div>
        </form>

        <button class="btn btn-primary" id="drone_imagery_rotate_stitched_view">Rotate Image (Does Not Save)</button>
        <button class="btn btn-default" id="drone_imagery_rotate_stitched_crosshairs">Draw Crosshairs Assist</button>
        <button class="btn btn-default" id="drone_imagery_rotate_stitched_restart">Restart</button>
        <button class="btn btn-primary" id="drone_imagery_rotate_stitched_submit">Save Rotated Image</button>
    </div>

    <div id="manage_drone_imagery_rotate_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_rotate_original_stitched_div">
    </canvas>
</div>

<div id="manage_drone_imagery_crop_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Crop Stitched Image To Field Experiment" &>

    <div class="well well-sm">
        <ul>
            <li>Here you can do a rough cropping of the stitched ortho image to focus only on the actual field experiment.</li>
            <li>Click on four points in the image to make a four-sided polygon.</li>
            <li>Only the last polygon that you draw will be used for the cropping.</li>
        </ul>
        <br/>
        <button class="btn btn-primary" id="drone_imagery_crop_stitched_submit">Crop Image To Selected Polygon</button>
    </div>

    <div class="well well-sm">
        <form class="form-horizontal">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group form-group-sm">
                        <label class="col-sm-6 control-label">Previously Used Image Cropping For This Field Trial: </label>
                        <div class="col-sm-6">
                            <div id="plot_polygons_previously_saved_image_cropping_templates">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
        <button class="btn btn-primary" id="drone_imagery_cropping_use_previous_cropping">Use Image Cropping</button>
    </div>

    <div id="manage_drone_imagery_crop_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_crop_original_stitched_div"></canvas>
</div>

<div id="manage_drone_imagery_vegetative_index_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Convert to Vegetative Index" &>

    <div class="well well-sm">
        <ul>
            <li>Here you can convert to a vegetative index.</li>
            <li>If you have a NIR band, you can calculate "Normalized difference vegetative index", NDVI.</li>
            <li>If you have an RGB image, you can calculate "Visible atmospheric resistant index", VARI, or "Triangular greenness index", TGI.</li>
            <li>If you have red or blue or green, or images from any spectral band, you can calculate ratios to use as your vegetative index.</li>
        </ul>
    </div>

    <hr>
    <div id="manage_drone_imagery_vegetative_index_tgi_bgr_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_TGI_bgr">Calculate "Triangular Greenness Index" TGI. TGI = {Green band2} - 0.39*{Red band3} - 0.61*{Blue band1}</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_vari_bgr_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_VARI_bgr">Calculate "Visible Atmospheric Resistant Index" VARI. VARI = ({Green band2} - {Red band3}) / ({Green band2} + {Red band3} - {Blue band1})</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_tgi_rgb_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_TGI_rgb">Calculate "Triangular Greenness Index" TGI. TGI = {Green band2} - 0.39*{Red band1} - 0.61*{Blue band3}</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_vari_rgb_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_VARI_rgb">Calculate "Visible Atmospheric Resistant Index" VARI. VARI = ({Green band2} - {Red band1}) / ({Green band2} + {Red band1} - {Blue band3})</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_ndvi_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_NDVI">Calculate "Normalized Difference Vegetative Index" NDVI. NDVI = ({NIR band1} - {Red band2}) / ({NIR band1} + {Red band2})</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_ndre_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_NDRE">Calculate "Normalized Difference Red Edge" NDRE. NDRE = ({NIR band1} - {Red Edge band2}) / ({NIR band1} + {Red Edge band2})</button>
        <hr>
    </div>

    <button class="btn btn-success" id="drone_imagery_rgb_vegetative_index_submit">Finish and Save Vegetative Index</button>
    <hr>

    <canvas id="drone_imagery_vegetative_index_original_stitched_div"></canvas>
</div>

<div id="manage_drone_imagery_remove_background_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Remove Background" &>

    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using Graphical Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a simple threshold value' &>

            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="well well-sm">
                        <h5>The background can be removed by placing a threshold on pixel values</h5>
                        <ul>
                            <li><b>1.</b> Click on the two right-most, highest peaks in the histogram. The right most peak represents the pixels we are interested in, while the peak immediately to the left of that peak represents the soil background.</li>
                            <li><b>2.</b> Click on the "Find Minimum" button.</li>
                            <li><b>3.</b> If the image looks good with the applied threshold, click Save. Otherwise, you can start over.</li>
                        </ul>
                    </div>

                    <div class="well well-sm">
                        <div name="drone_imagery_remove_background_threshold_current"></div>
                        <div name="drone_imagery_remove_background_threshold"></div>
                    </div>

                    <canvas id="drone_imagery_remove_background_histogram_div"></canvas>
                    <hr>
                    <button class="btn btn-primary" id="drone_imagery_remove_background_find_minimum">Find Minimum (Does Not Save)</button>
                    <button class="btn btn-default" id="drone_imagery_remove_background_start_over">Start Over</button>
                    <button class="btn btn-primary" id="drone_imagery_remove_background_submit">Save</button>
                    <hr>
                </div>
            </div>
        </&>
    </div>
    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using User Defined Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a simple threshold value' &>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Pixels with Value Lower Than: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_lower_threshold" name="drone_imagery_remove_background_lower_threshold" type="number" max="255" min="0" placeholder="e.g. 10 (Min 0)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Pixels with Value Higher Than: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_upper_threshold" name="drone_imagery_remove_background_upper_threshold" type="number" max="255" min="0" placeholder="e.g. 200 (Max 255)"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button id="drone_imagery_remove_background_defined_submit" class="btn btn-primary">Apply Threshold</button>
                </div>
            </div>
        </&>
    </div>
    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using Percentage Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background by specifying percentage threshold value' &>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Lowest Percent of Pixel Values: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_lower_threshold_percentage" name="drone_imagery_remove_background_lower_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of lowest pixel values (Min 0, Max 100)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Highest Percent of Pixel Values: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_upper_threshold_percentage" name="drone_imagery_remove_background_upper_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of highest pixel values (Min 0, Max 100)"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button id="drone_imagery_remove_background_defined_percentage_submit" class="btn btn-primary">Apply Threshold</button>
                </div>
            </div>
        </&>
    </div>

    <hr>

    <div id="manage_drone_imagery_remove_background_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_remove_background_original"></canvas>
</div>

<div id="manage_drone_imagery_plot_polygons_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Define Plot Polygons" &>

    <& /page/detail_page_2_col_section.mas, info_section_collapsible=>1, info_section_collapsed=>0, info_section_title => "<h4 style='display:inline'>Generate Polygon Template Tool</h4>", info_section_subtitle => 'Overlay a uniform grid over the image.', icon_class => "glyphicon glyphicon-th-large", info_section_id => "manage_drone_imagery_generate_plot_polygons_section" &>

    <div class="well well-sm">
        <div id="drone_imagery_plot_polygons_top_section"></div>

        <button id="drone_imagery_plot_polygons_clear" class="btn btn-danger">Clear All Polygons</button>
        <button id="drone_imagery_plot_polygons_clear_one" class="btn btn-danger">Remove One Polygon</button>
        <button id="drone_imagery_plot_polygons_get_distance" class="btn btn-default">Find Distance Between Points</button>
    </div>

    <div id="manage_drone_imagery_plot_polygons_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_plot_polygons_original_stitched_div"></canvas>

    <div id="drone_imagery_generated_polygons_div"></div>

    <hr>
    <div class="well well-sm">
        <div id="drone_imagery_trial_layout_div"></div>
    </div>
</div>

<div id="manage_drone_imagery_calculate_phenotypes_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Calculate Phenotypes" &>

    <div class="well well-sm">
        <ul>
            <li>Here you can calculate phenotypes for all plot polygons at once.</li>
        </ul>
    </div>

    <hr>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_zonal_stats">Zonal Statistics</button>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_sift">Calculate SIFT Features</button>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_surf">Calculate SURF Features</button>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_orb">Calculate ORB Features</button>
    <hr>

    <div id="manage_drone_imagery_calculate_phenotypes_show_zonal_stats" style="overflow:scroll"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_fourier_transform" style="overflow:scroll"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_sift"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_surf"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_orb"></div>

</div>

<div id="manage_drone_imagery_loading_div" style="display:none">
    <& /page/page_title.mas, title=>"Loading..." &>
    <div class="well well-sm">
        <center>
        <h3>Please wait...</h3>
        <hr>
        <img src="/img/wheel.gif" />
        </center>
    </div>
</div>

<div class="modal fade" id="drone_imagery_assign_plot_dialog" name="drone_imagery_assign_plot_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryAssignPlotDialog" data-backdrop="static">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryAssignPlotDialog">Assign Plot</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal" id="drone_imagery_assign_plot_form">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Plot Name:</label>
                    <div class="col-sm-7">
                        <input class="form-control" id="drone_imagery_plot_polygon_assign_plot_name" name="drone_imagery_plot_polygons_autocomplete" type="text" placeholder="Auto-completes plot name..." />
                    </div>
                </div>
            </form>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_plot_polygon_assign_add">Assign Plot</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_plot_polygon_remove_polygon" name="drone_imagery_plot_polygon_remove_polygon" tabindex="-1" role="dialog" aria-labelledby="droneImageryRemovePlotPolygonDialog" data-backdrop="static">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryRemovePlotPolygonDialog">Remove Plot Polygon</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Polygon Identifier:</label>
                    <div class="col-sm-7">
                        <input class="form-control" id="drone_imagery_plot_polygon_remove_polygon_number" name="drone_imagery_plot_polygon_remove_polygon_number" type="number" placeholder="e.g. 3" />
                    </div>
                </div>
            </form>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_plot_polygon_remove_polygon_submit">Remove Plot Polygon</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_merge_channels_dialog" name="drone_imagery_merge_channels_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryMergeChannelsDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryMergeChannelsDialog">Merge Drone Run Bands Into Single 3-channel image</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal" id="drone_imagery_merge_bands_form">
                <div class="form-group">
                    <label class="col-sm-5 control-label">First Band:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_merge_bands_band1_select"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Second Band:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_merge_bands_band2_select"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Third Band:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_merge_bands_band3_select"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Merge Image Type:</label>
                    <div class="col-sm-7">
                        <select class="form-control" id="drone_run_merge_image_type" name="drone_run_merge_image_type">
                            <option value="">Select One</option>
                            <option value="BGR">BGR (Band 1 = Blue, Band 2 = Green, Band 3 = Red)</option>
                            <option value="NRN">NRN (Band 1 = NIR, Band 2 = Red, Band 3 = NIR)</option>
                            <option value="NReN">NReN (Band 1 = NIR, Band 2 = Red Edge, Band 3 = NIR)</option>
                        </select>
                    </div>
                </div>
            </form>
        </div>

        <ul>
            <li>TGI = {GREEN band2} - 0.39*{RED band3} - 0.61*{BLUE band1}</li>
            <li>VARI = ( {GREEN band2} - {RED band3} ) / ( {GREEN band2} + {RED band3} - {BLUE band1} )</li>
            <li>NDVI = ( {NIR band1} - {RED band 2} ) / ( {NIR band1} + {RED band2} )</li>
            <li>NDRE = ( {NIR band1} - {RED EDGE band 2} ) / ( {NIR band1} + {RED EDGE band2} )</li>
        </ul>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_merge_bands_submit">Merge Bands</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_calc_phenotypes_zonal_channel_dialog" name="drone_imagery_calc_phenotypes_zonal_channel_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryCalcPhenotypesZonalChannelDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryCalcPhenotypesZonalChannelDialog">Select the Channel to Calculate Zonal Statistics On</h4>
      </div>
      <div class="modal-body">
          <div class="container-fluid">

              <form class="form-horizontal">
                  <div class="form-group">
                      <label class="col-sm-5 control-label">Select Time Point In Drone Run Series:</label>
                      <div class="col-sm-7">
                          <div id="drone_imagery_calculate_phenotypes_zonal_stats_time_select_div">
                          </div>
                      </div>
                  </div>
              </form>
              <br/>

              <div id="drone_imagery_calculate_phenotypes_zonal_stats_week_term_div"></div>
          </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_calculate_phenotypes_zonal_stats_channel_select">Calculate Zonal Statistics</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_delete_drone_run_dialog" name="drone_imagery_delete_drone_run_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryDeleteDroneRunDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryDeleteDroneRunDialog">Delete a Drone Run</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <div class="well">
                <ul>
                    <li>Deleting a drone run will remove the drone run and all drone run bands permanently.</li>
                    <li>All images in the drone run will be deleted (obsoleted).</li>
                    <li>Phenotypes that were generated for plots in this drone run will be deleted permanently.</li>
                </ul>
            </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_delete_drone_run_confirm">Delete Drone Run</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_calc_phenotypes_trial_dialog" name="drone_imagery_calc_phenotypes_trial_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryCalcPhenotypesZonalChannelTrialDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryCalcPhenotypesZonalChannelTrialDialog">Calculate Zonal Statistics</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <form class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Select Time Point In Drone Run Series:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_calculate_phenotypes_zonal_stats_trial_time_select_div">
                        </div>
                    </div>
                </div>
            </form>
            <br/>

            <div id="drone_imagery_week_term_div"></div>
        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_calculate_phenotypes_zonal_stats_trial_select">Calculate Zonal Statistics</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_minimal_vi_standard_process_dialog" name="drone_imagery_minimal_vi_standard_process_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryMinimalVIStandardProcessDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryMinimalVIStandardProcessDialog">Run Minimal Vegetative Index Standard Process</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <form class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Select Time Point In Drone Run Series:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_calculate_phenotypes_minimal_vi_standard_process_time_select_div">
                        </div>
                    </div>
                </div>
            </form>
            <br/>

            <div id="drone_imagery_minimal_vi_standard_process_week_term_div"></div>
        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_minimal_vi_standard_process_select">Run Minimal Vegetative Index Standard Process</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_extended_standard_process_dialog" name="drone_imagery_extended_standard_process_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryExtenededStandardProcessDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryExtenededStandardProcessDialog">Run Extended Standard Process</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <form class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Select Time Point In Drone Run Series:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_calculate_phenotypes_extended_standard_process_time_select_div">
                        </div>
                    </div>
                </div>
            </form>
            <br/>

            <div id="drone_imagery_extended_standard_process_week_term_div"></div>
        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_extended_standard_process_select">Run Extended Standard Process</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_download_phenotypes_dialog" name="drone_imagery_download_phenotypes_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryDownloadPhenotypesDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryDownloadPhenotypesDialog">Download drone image phenotypes and plot images</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <&| /util/workflow.mas, id=> "drone_imagery_download_phenotypes_workflow" &>
                <&| /util/workflow.mas:step, title=> "Field Trial" &>
                    <& /page/page_title.mas, title=>"Select the field trial you are interested in" &>
                    <br/><br/>
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Field Trial: </label>
                            <div class="col-sm-9" >
                                <div id="drone_imagery_download_phenotypes_trial_select_div"></div>
                            </div>
                        </div>
                    </form>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_download_phenotypes_field_trial_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Trait Selection" &>
                    <& /page/page_title.mas, title=>"Select the observation variable(s) you are interested in downloading" &>
                    <br/><br/>
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Observation Variables Phenotyped in the Selected Field Trial: </label>
                            <div class="col-sm-9" >
                                <div id="drone_imagery_download_phenotypes_trait_select_div"></div>
                            </div>
                        </div>
                    </form>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_download_phenotypes_trait_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Download" &>
                    <& /page/page_title.mas, title=>"Download!" &>

                    <div id ="drone_imagery_download_phenotypes_file_div">
                    </div>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_download_phenotypes_confirm_step">Submit</button>
                    </center>
                </&>
            </&>

        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_calculate_statistics_dialog" name="drone_imagery_calculate_statistics_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryCalculateStatisticsDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryCalculateStatisticsDialog">Calculate statistics on drone phenotypes</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <&| /util/workflow.mas, id=> "drone_imagery_calculate_statistics_workflow" &>
                <&| /util/workflow.mas:step, title=> "Field Trial" &>
                    <& /page/page_title.mas, title=>"Select the field trial you are interested in" &>
                    <br/><br/>
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Field Trial: </label>
                            <div class="col-sm-9" >
                                <div id="drone_imagery_calculate_statistics_trial_select_div"></div>
                            </div>
                        </div>
                    </form>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_calculate_statistics_field_trial_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Trait Selection" &>
                    <& /page/page_title.mas, title=>"Select the observation variable(s) you are interested in downloading" &>
                    <br/><br/>
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Observation Variables Phenotyped in the Selected Field Trial: </label>
                            <div class="col-sm-9" >
                                <div id="drone_imagery_calculate_statistics_trait_select_div"></div>
                            </div>
                        </div>
                    </form>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_calculate_statistics_trait_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Statistics" &>
                    <& /page/page_title.mas, title=>"Select statistics to calculate" &>

                    <div id ="drone_imagery_calculate_statistics_select_div">
                    </div>
                    <select class="form-control" id="drone_imagery_calculate_statistics_select_input">
                        <option value="lmer_germplasmname">LMER y~replicate+1|GermplasmName. Percent Variance Explained by GermplasmName</option>
                    </select>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_calculate_statistics_select_step">Submit</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Results" &>
                    <& /page/page_title.mas, title=>"Statistics results" &>

                    <div id ="drone_imagery_calculate_statistics_result_div">
                    </div>
                </&>
            </&>

        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_train_keras_cnn_dialog" name="drone_imagery_train_keras_cnn_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryTrainKerasCNNDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryTrainKerasCNNDialog">Select a dataset to train Keras CNN</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <&| /util/workflow.mas, id=> "drone_imagery_train_keras_model_workflow" &>
                <&| /util/workflow.mas:step, title=> "Intro" &>
                    <& /page/page_title.mas, title=>"This workflow will guide you through training a keras model using images and phenotypes in the database" &>
                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" onclick="Workflow.complete(this); return false;">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Field Trial" &>
                    <& /page/page_title.mas, title=>"Select the field trial you are interested in" &>
                    <br/><br/>
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Field Trial: </label>
                            <div class="col-sm-9" >
                                <div id="drone_imagery_train_keras_cnn_trial_select_div"></div>
                            </div>
                        </div>
                    </form>
                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_field_trial_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Trait Selection" &>
                    <& /page/page_title.mas, title=>"Select the trait you are interested in predicting" &>
                    <br/><br/>
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-5 control-label">Traits Phenotyped in the Selected Field Trial: </label>
                            <div class="col-sm-7" >
                                <div id="drone_imagery_train_keras_cnn_trait_select_div"></div>
                            </div>
                        </div>
                    </form>
                    <br/><br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_trait_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Drone Run Selection" &>
                    <& /page/page_title.mas, title=>"Select the drone runs you are interested in using in the model" &>

                    <table class="table table-bordered table-hover" id="drone_image_train_keras_drone_runs_table">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Drone Run Name</th>
                                <th>Drone Run Type</th>
                                <th>Drone Run Description</th>
                                <th>Drone Run Date</th>
                                <th>Field Trial Name</th>
                                <th>Field Trial Description</th>
                            </tr>
                        </thead>
                    </table>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_drone_run_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Images Selection" &>
                    <& /page/page_title.mas, title=>"Select the types of images you are interested in using in the model" &>

                    <table class="table table-bordered table-hover" id="drone_image_train_keras_plot_polygon_image_type_table">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Field Trial</th>
                                <th>Drone Run Name</th>
                                <th>Drone Run Band Name</th>
                                <th>Drone Run Band Type</th>
                                <th>Plot Polygon Type</th>
                                <th>Number of Images</th>
                            </tr>
                        </thead>
                    </table>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_plot_polygon_type_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Confirm" &>
                    <& /page/page_title.mas, title=>"Train the model!" &>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_confirm_step">Submit</button>
                    </center>
                </&>
            </&>

        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_standard_process_complete_dialog" name="drone_imagery_standard_process_complete_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryStandardProcessCompleteDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryStandardProcessCompleteDialog">Standard Process Complete</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <p>
                <span class="ui-icon ui-icon-circle-check" style="float: left; margin: 0 7px 50px 0;"></span>
                It will take time to finish processing your drone run and calculating phenotypes for all plot polygon images, vegetative indices, and processing combinations. Once it is complete, the "Processing Icon" on the Manage->Drone Imagery page will disappear from the drone run.
            </p>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-dismiss="modal">Finish</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_plot_polygon_template_options_dialog" name="drone_imagery_plot_polygon_template_options_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryPlotPolygonTemplateDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryPlotPolygonTemplateDialog">Plot Template Options</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <&| /page/info_section.mas, title => 'Copy/Paste Template', collapsible=>1, collapsed => 0, subtitle=> 'Copy/Paste this template onto the image.' &>
                <button class="btn btn-primary" id="drone_imagery_plot_polygon_template_options_paste_click">Click To Paste</button>
            </&>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<& /breeders_toolbox/drone_imagery/upload_drone_imagery_dialogs.mas &>

<script>

jQuery(document).ready(function() {

    //
    // Standard Process for Drone Runs
    //

    var manage_drone_imagery_standard_process_field_trial_id;
    var manage_drone_imagery_standard_process_drone_run_project_id;
    var manage_drone_imagery_standard_process_drone_run_band_project_id;
    var manage_drone_imagery_standard_process_rotate_stitched_image_id;
    var manage_drone_imagery_standard_process_rotate_drone_run_band_project_id;
    var manage_drone_imagery_standard_process_rotate_stitched_image_degrees;
    var manage_drone_imagery_standard_process_rotated_stitched_image_id;
    var manage_drone_imagery_standard_process_cropped_image_id;
    var manage_drone_imagery_standard_process_denoised_image_id;
    var manage_drone_imagery_standard_process_removed_background_image_id;
    var manage_drone_imagery_standard_process_current_threshold_background_removed_type;
    var manage_drone_imagery_standard_process_apply_drone_run_band_project_ids = [];
    var manage_drone_imagery_standard_process_apply_drone_run_band_vegetative_indices = [];
    var manage_drone_imagery_standard_process_phenotype_time = '';

    jQuery(document).on('click', 'button[name="project_drone_imagery_standard_process"]', function(){
        showManageDroneImagerySection('manage_drone_imagery_standard_process_div');

        manage_drone_imagery_standard_process_drone_run_project_id = jQuery(this).data('drone_run_project_id');
        manage_drone_imagery_standard_process_field_trial_id = jQuery(this).data('field_trial_id');

        jQuery('#manage_drone_imagery_standard_process_drone_run_bands_table').DataTable({
            destroy : true,
            ajax : '/api/drone_imagery/drone_run_bands?select_checkbox_name=drone_run_standard_process_band_select&drone_run_project_id='+manage_drone_imagery_standard_process_drone_run_project_id
        });
    });

    jQuery('#manage_drone_imagery_standard_process_drone_run_band_step').click(function(){
        var selected = [];
        jQuery('input[name="drone_run_standard_process_band_select"]:checked').each(function() {
            selected.push([jQuery(this).val(), jQuery(this).data('background_removed_threshold_type')]);
        });
        if (selected.length < 1){
            alert('Please select at least one drone run band! Preferably one with high contrast such as NIR.');
            return false;
        } else if (selected.length > 1){
            alert('Please select only one drone run band! Preferably one with high contrast such as NIR.');
            return false;
        } else {
            manage_drone_imagery_standard_process_drone_run_band_project_id = selected[0][0];
            manage_drone_imagery_standard_process_current_threshold_background_removed_type = selected[0][1];
            jQuery.ajax({
                url : '/api/drone_imagery/get_project_md_image?drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id+'&project_image_type_name=stitched_drone_imagery',
                beforeSend: function(){
                    showManageDroneImagerySection('manage_drone_imagery_loading_div');
                },
                success: function(response){
                    console.log(response);
                    manage_drone_imagery_standard_process_rotate_stitched_image_id = response.data[0]['image_id'];
                    manage_drone_imagery_standard_process_rotate_stitched_image_degrees = 0.00;

                    showRotateImage(manage_drone_imagery_standard_process_rotate_stitched_image_id, 'drone_imagery_standard_process_rotate_original_stitched_div', 'manage_drone_imagery_standard_process_rotate_load_div');

                    showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                },
                error: function(response){
                    alert('Error getting standard process image rotation step!');
                    showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                }
            });

            Workflow.complete("#manage_drone_imagery_standard_process_drone_run_band_step");
            Workflow.focus('#manage_drone_imagery_standard_process_workflow', 2);
        }
    });

    jQuery('#drone_imagery_standard_process_rotate_stitched_view').click(function(){
        manage_drone_imagery_standard_process_rotate_stitched_image_degrees = parseFloat(jQuery('#drone_imagery_standard_process_rotate_degrees_input').val());
        applyShowRotateImage(manage_drone_imagery_standard_process_rotate_stitched_image_id, manage_drone_imagery_standard_process_drone_run_band_project_id, manage_drone_imagery_standard_process_rotate_stitched_image_degrees, 'drone_imagery_standard_process_rotate_original_stitched_div');
    });

    jQuery('#drone_imagery_standard_process_rotate_stitched_crosshairs').click(function(){
        drawRotateCrosshairs(getRandomColor(), 'drone_imagery_standard_process_rotate_original_stitched_div');
    });

    jQuery('#drone_imagery_standard_process_rotate_stitched_restart').click(function(){
        showRotateImage(manage_drone_imagery_standard_process_rotate_stitched_image_id, 'drone_imagery_standard_process_rotate_original_stitched_div', 'manage_drone_imagery_standard_process_rotate_load_div');
        manage_drone_imagery_standard_process_rotate_stitched_image_degrees = 0.00;
    });

    jQuery('#manage_drone_imagery_standard_process_rotate_step').click(function() {
        var rotate_stitched_image_degrees_text = jQuery('#drone_imagery_standard_process_rotate_degrees_input').val();
        if (rotate_stitched_image_degrees_text == '') {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        if (isNaN(rotate_stitched_image_degrees_text)) {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        manage_drone_imagery_standard_process_rotate_stitched_image_degrees = parseFloat(rotate_stitched_image_degrees_text);
        jQuery.ajax({
            url : '/api/drone_imagery/rotate_image?image_id='+manage_drone_imagery_standard_process_rotate_stitched_image_id+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id+'&angle='+manage_drone_imagery_standard_process_rotate_stitched_image_degrees,
            beforeSend: function() {
                showManageDroneImagerySection('manage_drone_imagery_loading_div');
            },
            success: function(response){
                console.log(response);
                manage_drone_imagery_standard_process_rotated_stitched_image_id = response.rotated_image_id;
                showCropImageStart(manage_drone_imagery_standard_process_rotated_stitched_image_id, 'drone_imagery_standard_process_crop_original_stitched_div', 'manage_drone_imagery_standard_process_crop_load_div');

                get_select_box('drone_imagery_parameter_select','plot_polygons_standard_process_previously_saved_image_cropping_templates', {'name':'drone_imagery_standard_process_previously_saved_image_cropping_select', 'id':'drone_imagery_standard_process_previously_saved_image_cropping_select', 'empty':1, 'field_trial_id':manage_drone_imagery_standard_process_field_trial_id, 'parameter':'image_cropping' });

                Workflow.complete("#manage_drone_imagery_standard_process_rotate_step");
                Workflow.focus('#manage_drone_imagery_standard_process_workflow', 3);

                showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
            },
            error: function(response){
                //alert('Error saving standard process rotated image image!');
                showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
            }
        });
    });

    jQuery(document).on('click', '#manage_drone_imagery_standard_process_cropping_step', function(){
        console.log(crop_points);
        if (crop_points.length != 4) {
            alert('Please click 4 points on the image to draw a rectangle first!');
            return false;
        }
        jQuery.ajax({
            url : '/api/drone_imagery/crop_image?image_id='+manage_drone_imagery_standard_process_rotated_stitched_image_id+'&polygon='+JSON.stringify(crop_points)+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id,
            beforeSend: function() {
                showManageDroneImagerySection('manage_drone_imagery_loading_div');
            },
            success: function(response){
                console.log(response);
                manage_drone_imagery_standard_process_cropped_image_id = response.cropped_image_id;
                if (response.error) {
                    alert(response.error);
                    return false;
                } else {
                    jQuery.ajax({
                        url : '/api/drone_imagery/denoise?image_id='+manage_drone_imagery_standard_process_cropped_image_id+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id,
                        success: function(response){
                            console.log(response);
                            manage_drone_imagery_standard_process_denoised_image_id = response.denoised_image_id;
                            remove_background_current_image_id = manage_drone_imagery_standard_process_denoised_image_id;
                            remove_background_drone_run_band_project_id = manage_drone_imagery_standard_process_drone_run_band_project_id;

                            showRemoveBackgroundHistogramStart(manage_drone_imagery_standard_process_denoised_image_id, 'drone_imagery_standard_process_remove_background_original', 'drone_imagery_standard_process_remove_background_histogram_div', 'manage_drone_imagery_standard_process_remove_background_load_div');

                            Workflow.complete("#manage_drone_imagery_standard_process_cropping_step");
                            Workflow.focus('#manage_drone_imagery_standard_process_workflow', 4);

                            showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                        },
                        error: function(response){
                            alert('Error standard process denoising image!');
                            showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                        }
                    });
                }
            },
            error: function(response){
                alert('Error standard process cropping image!');
                showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
            }
        });
    });

    jQuery(document).on('click', '#drone_imagery_standard_process_cropping_use_previous_cropping', function() {
        var plot_polygons_use_previously_saved_cropping = jQuery('#drone_imagery_standard_process_previously_saved_image_cropping_select').val();
        jQuery.ajax({
            url : '/api/drone_imagery/retrieve_parameter_template?plot_polygons_template_projectprop_id='+plot_polygons_use_previously_saved_cropping,
            success: function(response){
                console.log(response);
                jQuery.ajax({
                    url : '/api/drone_imagery/crop_image?image_id='+manage_drone_imagery_standard_process_rotated_stitched_image_id+'&polygon='+JSON.stringify(response.parameter[0])+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id,
                    beforeSend: function() {
                        showManageDroneImagerySection('manage_drone_imagery_loading_div');
                    },
                    success: function(response){
                        console.log(response);
                        manage_drone_imagery_standard_process_cropped_image_id = response.cropped_image_id;
                        if (response.error) {
                            alert(response.error);
                            return false;
                        } else {
                            jQuery.ajax({
                                url : '/api/drone_imagery/denoise?image_id='+manage_drone_imagery_standard_process_cropped_image_id+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id,
                                success: function(response){
                                    console.log(response);
                                    manage_drone_imagery_standard_process_denoised_image_id = response.denoised_image_id;
                                    remove_background_current_image_id = manage_drone_imagery_standard_process_denoised_image_id;
                                    remove_background_drone_run_band_project_id = manage_drone_imagery_standard_process_drone_run_band_project_id;

                                    showRemoveBackgroundHistogramStart(manage_drone_imagery_standard_process_denoised_image_id, 'drone_imagery_standard_process_remove_background_original', 'drone_imagery_standard_process_remove_background_histogram_div', 'manage_drone_imagery_standard_process_remove_background_load_div');

                                    Workflow.complete("#manage_drone_imagery_standard_process_cropping_step");
                                    Workflow.focus('#manage_drone_imagery_standard_process_workflow', 4);

                                    showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                                },
                                error: function(response){
                                    alert('Error standard process denoising image!');
                                    showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                                }
                            });
                        }
                    },
                    error: function(response){
                        showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
                        alert('Error cropping image!');
                    }
                });
            },
            error: function(response){
                alert('Error retrieving saved cropping template in standard process!');
                showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
            }
        });
        return;
    });

    jQuery('#drone_imagery_standard_process_remove_background_defined_percentage_submit').click(function(){
        var drone_imagery_remove_background_lower_percentage = Number(jQuery('#drone_imagery_standard_process_remove_background_lower_threshold_percentage').val());
        var drone_imagery_remove_background_upper_percentage = Number(jQuery('#drone_imagery_standard_process_remove_background_upper_threshold_percentage').val());

        //var threshold_value_return = calculateThresholdPercentageValues('drone_imagery_remove_background_original', drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage);

        manage_drone_imagery_standard_process_remove_background_threshold_percentage_save(manage_drone_imagery_standard_process_denoised_image_id, manage_drone_imagery_standard_process_current_threshold_background_removed_type, manage_drone_imagery_standard_process_drone_run_band_project_id, drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage);
    });

    function manage_drone_imagery_standard_process_remove_background_threshold_percentage_save(image_id, image_type, drone_run_band_project_id, lower_threshold_percentage, upper_threshold_percentage){
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/remove_background_percentage_save',
            dataType: "json",
            beforeSend: function() {
                showManageDroneImagerySection('manage_drone_imagery_loading_div');
            },
            data: {
                'image_id': image_id,
                'image_type_list': image_type,
                'drone_run_band_project_id': drone_run_band_project_id,
                'lower_threshold_percentage': lower_threshold_percentage,
                'upper_threshold_percentage': upper_threshold_percentage
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }
                manage_drone_imagery_standard_process_removed_background_image_id = response[0]['removed_background_image_id'];

                showPlotPolygonStart(manage_drone_imagery_standard_process_removed_background_image_id, drone_run_band_project_id, 'drone_imagery_standard_process_plot_polygons_original_stitched_div', 'drone_imagery_standard_process_plot_polygons_top_section', 'manage_drone_imagery_standard_process_plot_polygons_load_div');

                showPlotPolygonTableStart(manage_drone_imagery_standard_process_field_trial_id, 'drone_imagery_standard_process_trial_layout_div', 'drone_imagery_standard_process_layout_table')

                get_select_box('drone_imagery_parameter_select','plot_polygons_standard_process_previously_saved_plot_polygon_templates', {'name': 'plot_polygons_standard_process_template_select', 'id': 'plot_polygons_standard_process_template_select', 'empty':1, 'field_trial_id':manage_drone_imagery_standard_process_field_trial_id, 'parameter':'plot_polygons' });

                Workflow.complete("#drone_imagery_standard_process_remove_background_defined_percentage_submit");
                Workflow.focus('#manage_drone_imagery_standard_process_workflow', 5);

                showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
            },
            error: function(response){
                //alert('Error saving standard process removed background image!');
                showManageDroneImagerySection('manage_drone_imagery_standard_process_div');
            }
        });
    }

    jQuery('#plot_polygons_standard_process_use_previously_saved_template').click(function() {
        var plot_polygons_use_previously_saved_template = jQuery('#plot_polygons_standard_process_template_select').val();
        if (plot_polygons_use_previously_saved_template == '') {
            alert('Please select a previously saved template before trying to apply it. If there is not a template listed, then you can create one using the templating tool above.');
            return;
        }

        jQuery.ajax({
            url : '/api/drone_imagery/retrieve_parameter_template?plot_polygons_template_projectprop_id='+plot_polygons_use_previously_saved_template,
            success: function(response){
                console.log(response);

                drone_imagery_plot_polygons_display = response.parameter;
                drone_imagery_plot_polygons = response.parameter;

                draw_canvas_image(background_image_url, 0);
                droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons, 'drone_imagery_standard_process_trial_layout_div', 'drone_imagery_standard_process_layout_table');
                droneImageryRectangleLayoutTable(drone_imagery_plot_polygons, 'drone_imagery_standard_process_generated_polygons_div', 'drone_imagery_standard_process_generated_polygons_table', 'drone_imagery_standard_process_plot_polygons_generated_assign', 'drone_imagery_standard_process_plot_polygons_submit_bottom');
            },
            error: function(response){
                alert('Error retrieving plot polygons template in standard process!');
            }
        });
        return;
    });

    jQuery('#drone_imagery_standard_process_plot_polygons_rectangles_apply').click(function() {
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];

        var num_rows_val = jQuery('#drone_imagery_standard_process_plot_polygons_num_rows').val();
        var num_cols_val = jQuery('#drone_imagery_standard_process_plot_polygons_num_cols').val();
        var section_top_row_left_offset_val = jQuery('#drone_imagery_standard_process_plot_polygons_top_row_left_offset').val();
        var section_top_row_right_offset_val = jQuery('#drone_imagery_standard_process_plot_polygons_top_row_right_offset').val();
        var section_bottom_row_left_offset_val = jQuery('#drone_imagery_standard_process_plot_polygons_bottom_row_left_offset').val();
        var section_left_column_top_offset_val = jQuery('#drone_imagery_standard_process_plot_polygons_left_column_top_offset').val();
        var section_left_column_bottom_offset_val = jQuery('#drone_imagery_standard_process_plot_polygons_left_column_bottom_offset').val();
        var section_right_column_bottom_offset_val = jQuery('#drone_imagery_standard_process_plot_polygons_right_col_bottom_offset').val();

        plotPolygonsRectanglesApply(num_rows_val, num_cols_val, section_top_row_left_offset_val, section_bottom_row_left_offset_val, section_left_column_top_offset_val, section_left_column_bottom_offset_val, section_top_row_right_offset_val, section_right_column_bottom_offset_val, 'drone_imagery_standard_process_generated_polygons_div', 'drone_imagery_standard_process_generated_polygons_table', 'drone_imagery_standard_process_plot_polygons_generated_assign', 'drone_imagery_standard_process_plot_polygons_submit_bottom', 'drone_imagery_standard_process_plot_polygons_active_templates');
    });

    var drone_imagery_standard_process_plot_polygon_click_type = '';
    jQuery('#drone_imagery_standard_process_plot_polygons_top_left_click').click(function(){
        alert('Now click the top left corner of your field on the image below.');
        drone_imagery_standard_process_plot_polygon_click_type = 'top_left';
    });
    jQuery('#drone_imagery_standard_process_plot_polygons_top_right_click').click(function(){
        alert('Now click the top right corner of your field on the image below.');
        drone_imagery_standard_process_plot_polygon_click_type = 'top_right';
    });
    jQuery('#drone_imagery_standard_process_plot_polygons_bottom_left_click').click(function(){
        alert('Now click the bottom left corner of your field on the image below.');
        drone_imagery_standard_process_plot_polygon_click_type = 'bottom_left';
    });
    jQuery('#drone_imagery_standard_process_plot_polygons_bottom_right_click').click(function(){
        alert('Now click the bottom right corner of your field on the image below.');
        drone_imagery_standard_process_plot_polygon_click_type = 'bottom_right';
    });
    jQuery(document).on('click', '#drone_imagery_standard_process_plot_polygons_get_distance', function(){
        alert('Click on two points in image. The distance will be returned.');
        drone_imagery_standard_process_plot_polygon_click_type = 'get_distance';
        return false;
    });

    jQuery(document).on('click', '#drone_imagery_standard_process_plot_polygons_clear', function(){
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        plot_polygons_generated_polygons = [];
        drone_imagery_plot_polygons_removed_numbers = [];
        plot_polygons_template_dimensions = [];
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw_canvas_image(background_image_url, 0);
        jQuery('#drone_imagery_standard_process_generated_polygons_div').html('');
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons, 'drone_imagery_standard_process_trial_layout_div', 'drone_imagery_standard_process_layout_table');
        droneImageryDrawPlotPolygonActiveTemplatesTable("drone_imagery_standard_process_plot_polygons_active_templates", plot_polygons_template_dimensions);
    });

    jQuery(document).on('click', '#drone_imagery_standard_process_plot_polygons_clear_one', function(){
        jQuery('#drone_imagery_plot_polygon_remove_polygon').modal('show');
        return false;
    });

    jQuery(document).on('click', '#drone_imagery_standard_process_plot_polygons_generated_assign', function() {
        generatePlotPolygonAssignments('drone_imagery_standard_process_trial_layout_div', 'drone_imagery_standard_process_layout_table');

        jQuery('input[name="drone_imagery_plot_polygons_autocomplete"]').each(function() {
            var stock_name = this.value;
            if (stock_name != '') {
                var polygon = drone_imagery_plot_generated_polygons[jQuery(this).data('generated_polygon_key')];
                drone_imagery_plot_polygons[stock_name] = polygon;
            }
        });
    });

    jQuery(document).on('click', 'button[name=drone_imagery_standard_process_plot_polygons_submit_bottom]', function(){
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/save_plot_polygons_template',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_standard_process_drone_run_band_project_id,
                'stock_polygons': JSON.stringify(drone_imagery_plot_polygons)
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                } else {
                    Workflow.complete("#drone_imagery_standard_process_generated_polygons_div");
                    Workflow.focus('#manage_drone_imagery_standard_process_workflow', 6);
                }
            },
            error: function(response){
                //alert('Error saving standard process assigned plot polygons!')
            }
        });

        jQuery('#manage_drone_imagery_standard_process_drone_run_bands_apply_table').DataTable({
            destroy : true,
            ajax : '/api/drone_imagery/drone_run_bands?select_checkbox_name=drone_run_standard_process_band_apply_select&drone_run_project_id='+manage_drone_imagery_standard_process_drone_run_project_id+'&select_all=1&disable=1'
        });
    });

    jQuery('#manage_drone_imagery_standard_process_drone_run_band_apply_step').click(function(){
        manage_drone_imagery_standard_process_apply_drone_run_band_project_ids = [];
        jQuery('input[name="drone_run_standard_process_band_apply_select"]:checked').each(function() {
            manage_drone_imagery_standard_process_apply_drone_run_band_project_ids.push(jQuery(this).val());
        });
        if (manage_drone_imagery_standard_process_apply_drone_run_band_project_ids.length < 1){
            alert('Please select at least one other drone run band!');
            return false;
        } else {
            Workflow.complete("#manage_drone_imagery_standard_process_drone_run_band_apply_step");
            Workflow.focus('#manage_drone_imagery_standard_process_workflow', 7);
        }
    });

    jQuery('#manage_drone_imagery_standard_process_indices_step').click(function(){
        manage_drone_imagery_standard_process_apply_drone_run_band_vegetative_indices = [];
        jQuery('input[name="drone_imagery_standard_process_apply_indices_select"]:checked').each(function() {
            manage_drone_imagery_standard_process_apply_drone_run_band_vegetative_indices.push(jQuery(this).val());
        });
        if (manage_drone_imagery_standard_process_apply_drone_run_band_vegetative_indices.length < 1){
            alert('Please select at least one vegetative index!');
            return false;
        } else {
            jQuery.ajax({
                type: 'GET',
                url: '/api/drone_imagery/get_weeks_after_planting_date?drone_run_project_id='+manage_drone_imagery_standard_process_drone_run_project_id,
                dataType: "json",
                beforeSend: function (){
                    jQuery('#working_modal').modal('show');
                },
                success: function(response){
                    jQuery('#working_modal').modal('hide');
                    console.log(response);
                    if (response.error) {
                        alert(response.error);
                    }
                    get_select_box('ontology_children','drone_imagery_standard_process_calculate_phenotypes_zonal_stats_time_select_div', {'selectbox_id':'drone_imagery_standard_process_calculate_phenotypes_zonal_stats_time_select', 'selectbox_name':'drone_imagery_standard_process_calculate_phenotypes_zonal_stats_time_select', 'empty':1, 'rel_cvterm':'is_a', 'rel_cv':'relationship', 'parent_node_cvterm':'time of year|TIME:0000005', 'selected':response.time_ontology_cvterm_id });

                    var html = "<center><b>Field Trial Planting Date</b>: "+response.planting_date+"<br/><b>Drone Run Date</b>: "+response.drone_run_date+"<br/><b>Number of Weeks Ontology Term Difference</b>: "+response.rounded_time_difference_weeks+"<br/><b>Number of Weeks Ontology Term</b>: "+response.time_ontology_term+"<br/></center>";
                    jQuery('#drone_imagery_standard_process_week_term_div').html(html);
                    if (response.time_ontology_cvterm_id) {
                        manage_drone_imagery_standard_process_phenotype_time = response.time_ontology_cvterm_id;
                    }
                },
                error: function(response){
                    alert('Error getting time terms!');
                    jQuery('#working_modal').modal('hide');
                }
            });

            Workflow.complete("#manage_drone_imagery_standard_process_indices_step");
            Workflow.focus('#manage_drone_imagery_standard_process_workflow', 8);
        }
    });

    jQuery('#manage_drone_imagery_standard_process_phenotypes_step').click(function(){
        var selected = [];
        if (manage_drone_imagery_standard_process_phenotype_time == '') {
            manage_drone_imagery_standard_process_phenotype_time = jQuery('#drone_imagery_standard_process_calculate_phenotypes_zonal_stats_time_select').val();
        }

        jQuery('input[name="drone_imagery_standard_process_phenotypes_select"]:checked').each(function() {
            selected.push(jQuery(this).val());
        });
        if (selected.length < 1){
            alert('Please select at least one phenotype!');
            return false;
        } else {
            jQuery.ajax({
                type: 'POST',
                url: '/api/drone_imagery/standard_process_apply',
                dataType: "json",
                data: {
                    'drone_run_project_id': manage_drone_imagery_standard_process_drone_run_project_id,
                    'drone_run_band_project_id': manage_drone_imagery_standard_process_drone_run_band_project_id,
                    'apply_drone_run_band_project_ids': JSON.stringify(manage_drone_imagery_standard_process_apply_drone_run_band_project_ids),
                    'vegetative_indices': JSON.stringify(manage_drone_imagery_standard_process_apply_drone_run_band_vegetative_indices),
                    'phenotype_types': JSON.stringify(selected),
                    'time_cvterm_id': manage_drone_imagery_standard_process_phenotype_time,
                    'standard_process_type': 'minimal'
                },
                success: function(response){
                    console.log(response);
                    if(response.error) {
                        alert(response.error);
                    }
                },
                error: function(response){
                    //alert('Error saving standard process assigned plot polygons!')
                }
            });

            Workflow.complete("#manage_drone_imagery_standard_process_phenotypes_step");
            jQuery('#drone_imagery_standard_process_complete_dialog').modal('show');
        }
    });

    jQuery('#drone_imagery_standard_process_complete_dialog').on('hidden.bs.modal', function () {
        location.reload();
    })

    jQuery(document).on('click', 'button[name="project_drone_imagery_phenotype_run"]', function(){
        manage_drone_imagery_standard_process_drone_run_project_id = jQuery(this).data('drone_run_project_id');

        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/get_weeks_after_planting_date?drone_run_project_id='+manage_drone_imagery_standard_process_drone_run_project_id,
            dataType: "json",
            beforeSend: function (){
                jQuery('#working_modal').modal('show');
            },
            success: function(response){
                jQuery('#working_modal').modal('hide');
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
                get_select_box('ontology_children','drone_imagery_calculate_phenotypes_zonal_stats_trial_time_select_div', {'selectbox_id':'drone_imagery_calculate_phenotypes_zonal_stats_trial_time_select', 'selectbox_name':'drone_imagery_calculate_phenotypes_zonal_stats_trial_time_select', 'empty':1, 'rel_cvterm':'is_a', 'rel_cv':'relationship', 'parent_node_cvterm':'time of year|TIME:0000005', 'selected':response.time_ontology_cvterm_id });

                var html = "<center><b>Field Trial Planting Date</b>: "+response.planting_date+"<br/><b>Drone Run Date</b>: "+response.drone_run_date+"<br/><b>Number of Weeks Difference</b>: "+response.rounded_time_difference_weeks+"<br/><b>Number of Weeks Ontology Term</b>: "+response.time_ontology_term+"<br/></center>";
                jQuery('#drone_imagery_week_term_div').html(html);
                if (response.time_ontology_cvterm_id) {
                    manage_drone_imagery_standard_process_phenotype_time = response.time_ontology_cvterm_id;
                }
            },
            error: function(response){
                alert('Error getting time terms!');
                jQuery('#working_modal').modal('hide');
            }
        });

        jQuery('#drone_imagery_calc_phenotypes_trial_dialog').modal('show');
    });

    jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_trial_select').click(function(){
        if (manage_drone_imagery_standard_process_phenotype_time == '') {
            manage_drone_imagery_standard_process_phenotype_time = jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_trial_time_select').val();
        }
        if (manage_drone_imagery_standard_process_phenotype_time == '') {
            alert('Please select a time term!');
            return false;
        }

        alert("Phenotype generation will occur in the background. You can check the indicator on this page by refreshing the page.");

        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/generate_phenotypes?drone_run_project_id='+manage_drone_imagery_standard_process_drone_run_project_id+'&time_cvterm_id='+manage_drone_imagery_standard_process_phenotype_time+'&standard_process_type=extended',
            dataType: "json",
            success: function(response){
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
                if (response.success) {
                    alert('Drone image phenotypes stored!');
                }
            },
            error: function(response){
                alert('Error generating drone image phenotypes!');
            }
        });

        location.reload();
    });

    //
    // Minimal VI Standard Process ()
    //

    var manage_drone_imagery_standard_process_minimal_vi_drone_run_project_id;
    var manage_drone_imagery_standard_process_minimal_vi_phenotype_time = '';

    jQuery(document).on('click', 'button[name=project_drone_imagery_standard_process_minimal_vi]', function(){
        manage_drone_imagery_standard_process_minimal_vi_drone_run_project_id = jQuery(this).data('drone_run_project_id');

        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/get_weeks_after_planting_date?drone_run_project_id='+manage_drone_imagery_standard_process_minimal_vi_drone_run_project_id,
            dataType: "json",
            beforeSend: function (){
                jQuery('#working_modal').modal('show');
            },
            success: function(response){
                jQuery('#working_modal').modal('hide');
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
                get_select_box('ontology_children','drone_imagery_calculate_phenotypes_minimal_vi_standard_process_time_select_div', {'selectbox_id':'drone_imagery_calculate_phenotypes_minimal_vi_standard_process_time_select', 'selectbox_name':'drone_imagery_calculate_phenotypes_minimal_vi_standard_process_time_select', 'empty':1, 'rel_cvterm':'is_a', 'rel_cv':'relationship', 'parent_node_cvterm':'time of year|TIME:0000005', 'selected':response.time_ontology_cvterm_id });

                var html = "<center><b>Field Trial Planting Date</b>: "+response.planting_date+"<br/><b>Drone Run Date</b>: "+response.drone_run_date+"<br/><b>Number of Weeks Difference</b>: "+response.rounded_time_difference_weeks+"<br/><b>Number of Weeks Ontology Term</b>: "+response.time_ontology_term+"<br/></center>";
                jQuery('#drone_imagery_minimal_vi_standard_process_week_term_div').html(html);
                if (response.time_ontology_cvterm_id) {
                    manage_drone_imagery_standard_process_minimal_vi_phenotype_time = response.time_ontology_cvterm_id;
                }
            },
            error: function(response){
                alert('Error getting time terms!');
                jQuery('#working_modal').modal('hide');
            }
        });

        jQuery('#drone_imagery_minimal_vi_standard_process_dialog').modal('show');
    });

    jQuery('#drone_imagery_minimal_vi_standard_process_select').click(function() {
        if (manage_drone_imagery_standard_process_minimal_vi_phenotype_time == '') {
            manage_drone_imagery_standard_process_minimal_vi_phenotype_time = jQuery('#drone_imagery_calculate_phenotypes_minimal_vi_standard_process_time_select').val();
        }
        if (manage_drone_imagery_standard_process_minimal_vi_phenotype_time == '') {
            alert('Please select a time term!');
            return false;
        }

        alert("Minimal vegetative index standard process will occur in the background. You can check the indicator on this page by refreshing the page.");

        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/standard_process_minimal_vi_apply?drone_run_project_id='+manage_drone_imagery_standard_process_minimal_vi_drone_run_project_id,
            dataType: "json",
            success: function(response){
                console.log(response);
                if (response.error) {
                    alert(response.error);
                } else {
                    alert('Minimal vegetative index standard process complete! Phenotype generation may still be occurring.');
                    location.reload();
                }
            },
            error: function(response){
                alert('Error running minimal vegetative index standard process!');
            }
        });

        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/generate_phenotypes?drone_run_project_id='+manage_drone_imagery_standard_process_minimal_vi_drone_run_project_id+'&time_cvterm_id='+manage_drone_imagery_standard_process_minimal_vi_phenotype_time+'&standard_process_type=minimal_vi',
            dataType: "json",
            success: function(response){
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
                if (response.success) {
                    alert('Drone image phenotypes stored for minimal vegetative index standard process!');
                }
            },
            error: function(response){
                alert('Error generating drone image phenotypes for minial vegetative index standard process!');
            }
        });

        location.reload();
    });

    //
    // Extended Standard Process
    //

    var manage_drone_imagery_standard_process_extended_drone_run_project_id;
    var manage_drone_imagery_standard_process_extended_phenotype_time = '';

    jQuery(document).on('click', 'button[name="project_drone_imagery_standard_process_extended"]', function() {
        manage_drone_imagery_standard_process_extended_drone_run_project_id = jQuery(this).data('drone_run_project_id');
        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/get_weeks_after_planting_date?drone_run_project_id='+manage_drone_imagery_standard_process_extended_drone_run_project_id,
            dataType: "json",
            beforeSend: function (){
                jQuery('#working_modal').modal('show');
            },
            success: function(response){
                jQuery('#working_modal').modal('hide');
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
                get_select_box('ontology_children','drone_imagery_calculate_phenotypes_extended_standard_process_time_select_div', {'selectbox_id':'drone_imagery_calculate_phenotypes_extended_standard_process_time_select', 'selectbox_name':'drone_imagery_calculate_phenotypes_extended_standard_process_time_select', 'empty':1, 'rel_cvterm':'is_a', 'rel_cv':'relationship', 'parent_node_cvterm':'time of year|TIME:0000005', 'selected':response.time_ontology_cvterm_id });

                var html = "<center><b>Field Trial Planting Date</b>: "+response.planting_date+"<br/><b>Drone Run Date</b>: "+response.drone_run_date+"<br/><b>Number of Weeks Difference</b>: "+response.rounded_time_difference_weeks+"<br/><b>Number of Weeks Ontology Term</b>: "+response.time_ontology_term+"<br/></center>";
                jQuery('#drone_imagery_extended_standard_process_week_term_div').html(html);
                if (response.time_ontology_cvterm_id) {
                    manage_drone_imagery_standard_process_extended_phenotype_time = response.time_ontology_cvterm_id;
                }
            },
            error: function(response){
                alert('Error getting time terms!');
                jQuery('#working_modal').modal('hide');
            }
        });
        jQuery('#drone_imagery_extended_standard_process_dialog').modal('show');
    });

    jQuery('#drone_imagery_extended_standard_process_select').click(function(){
        if (manage_drone_imagery_standard_process_extended_phenotype_time == '') {
            manage_drone_imagery_standard_process_extended_phenotype_time = jQuery('#drone_imagery_calculate_phenotypes_extended_standard_process_time_select').val();
        }
        if (manage_drone_imagery_standard_process_extended_phenotype_time == '') {
            alert('Please select a time term!');
            return false;
        }

        alert("Extended standard process will occur in the background. You can check the indicator on this page by refreshing the page.");

        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/standard_process_extended_apply?drone_run_project_id='+manage_drone_imagery_standard_process_extended_drone_run_project_id+'&time_cvterm_id='+manage_drone_imagery_standard_process_extended_phenotype_time+'&standard_process_type=extended',
            dataType: "json",
            success: function(response){
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
            },
            error: function(response){
                alert('Error running extended standard process!');
            }
        });

        location.reload();
    });

    //
    // Download Phenotypes
    //

    var manage_drone_imagery_download_phenotypes_field_trial_id = undefined;
    var manage_drone_imagery_download_phenotypes_trait_ids = [];

    jQuery('#download_phenotypes_drone_imagery_link').click(function(){
        jQuery('#drone_imagery_download_phenotypes_dialog').modal('show');
        get_select_box('trials', 'drone_imagery_download_phenotypes_trial_select_div', { 'name' : 'drone_imagery_download_phenotypes_field_trial_id', 'id' : 'drone_imagery_download_phenotypes_field_trial_id', 'empty':1, 'multiple':0 });

        manage_drone_imagery_download_phenotypes_field_trial_id = undefined;
        manage_drone_imagery_download_phenotypes_trait_ids = [];
    });

    jQuery('#drone_imagery_download_phenotypes_field_trial_select_step').click(function(){
        manage_drone_imagery_download_phenotypes_field_trial_id = jQuery('#drone_imagery_download_phenotypes_field_trial_id').val();
        if (manage_drone_imagery_download_phenotypes_field_trial_id == '') {
            alert('Please select a field trial first!');
        } else {
            get_select_box('traits', 'drone_imagery_download_phenotypes_trait_select_div', { 'name' : 'drone_imagery_download_phenotypes_trait_id_select', 'id' : 'drone_imagery_download_phenotypes_trait_id_select', 'empty':1, 'multiple':1, 'size': 20, 'trial_ids':manage_drone_imagery_download_phenotypes_field_trial_id, 'stock_type':'plot' });

            Workflow.complete("#drone_imagery_download_phenotypes_field_trial_select_step");
            Workflow.focus('#drone_imagery_download_phenotypes_workflow', 1);
        }
        return false;
    });

    jQuery('#drone_imagery_download_phenotypes_trait_select_step').click(function(){
        manage_drone_imagery_download_phenotypes_trait_ids = jQuery('#drone_imagery_download_phenotypes_trait_id_select').val();
        if (manage_drone_imagery_download_phenotypes_trait_ids == null || manage_drone_imagery_download_phenotypes_trait_ids == undefined) {
            alert('Please select at least one observation variable!');
            return false;
        }
        if (manage_drone_imagery_download_phenotypes_trait_ids.length < 1){
            alert('Please select at least one observation variable!');
        } else {
            Workflow.complete("#drone_imagery_download_phenotypes_trait_select_step");
            Workflow.focus('#drone_imagery_download_phenotypes_workflow', 2);
        }
        return false;
    });

    jQuery('#drone_imagery_download_phenotypes_confirm_step').click(function() {
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/analysis_query',
            dataType: "json",
            data: {
                'observation_variable_id_list':JSON.stringify(manage_drone_imagery_download_phenotypes_trait_ids),
                'field_trial_id_list':JSON.stringify([manage_drone_imagery_download_phenotypes_field_trial_id]),
                'format':'csv'
            },
            beforeSend: function (){
                jQuery('#working_modal').modal('show');
            },
            success: function(response){
                jQuery('#working_modal').modal('hide');
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }
                jQuery('#drone_imagery_download_phenotypes_file_div').html('Download File: <a href="'+response.file+'">'+response.file+'</a>');
            },
            error: function(response){
                alert('Error downloading drone image phenotypes!');
                jQuery('#working_modal').modal('hide');
            }
        });
    });

    //
    // Calculate statistics
    //

    var manage_drone_imagery_calculate_statistics_field_trial_id = undefined;
    var manage_drone_imagery_calculate_statistics_trait_ids = [];
    var manage_drone_imagery_calculate_statistics_select = '';

    jQuery('#drone_imagery_calculate_statistics_link').click(function(){
        jQuery('#drone_imagery_calculate_statistics_dialog').modal('show');
        get_select_box('trials', 'drone_imagery_calculate_statistics_trial_select_div', { 'name' : 'drone_imagery_calculate_statistics_field_trial_id', 'id' : 'drone_imagery_calculate_statistics_field_trial_id', 'empty':1, 'multiple':0 });

        manage_drone_imagery_calculate_statistics_field_trial_id = undefined;
        manage_drone_imagery_calculate_statistics_trait_ids = [];
    });

    jQuery('#drone_imagery_calculate_statistics_field_trial_select_step').click(function(){
        manage_drone_imagery_calculate_statistics_field_trial_id = jQuery('#drone_imagery_calculate_statistics_field_trial_id').val();
        if (manage_drone_imagery_calculate_statistics_field_trial_id == '') {
            alert('Please select a field trial first!');
        } else {
            get_select_box('traits', 'drone_imagery_calculate_statistics_trait_select_div', { 'name' : 'drone_imagery_calculate_statistics_trait_id_select', 'id' : 'drone_imagery_calculate_statistics_trait_id_select', 'empty':1, 'multiple':1, 'size': 20, 'trial_ids':manage_drone_imagery_calculate_statistics_field_trial_id, 'stock_type':'plot' });

            Workflow.complete("#drone_imagery_calculate_statistics_field_trial_select_step");
            Workflow.focus('#drone_imagery_calculate_statistics_workflow', 1);
        }
        return false;
    });

    jQuery('#drone_imagery_calculate_statistics_trait_select_step').click(function(){
        manage_drone_imagery_calculate_statistics_trait_ids = jQuery('#drone_imagery_calculate_statistics_trait_id_select').val();
        if (manage_drone_imagery_calculate_statistics_trait_ids == null || manage_drone_imagery_calculate_statistics_trait_ids == undefined) {
            alert('Please select at least one observation variable!');
            return false;
        }
        if (manage_drone_imagery_calculate_statistics_trait_ids.length < 1){
            alert('Please select at least one observation variable!');
        } else {
            Workflow.complete("#drone_imagery_calculate_statistics_trait_select_step");
            Workflow.focus('#drone_imagery_calculate_statistics_workflow', 2);
        }
        return false;
    });

    jQuery('#drone_imagery_calculate_statistics_select_step').click(function(){
        manage_drone_imagery_calculate_statistics_select = jQuery('#drone_imagery_calculate_statistics_select_input').val();

        jQuery.ajax({
            url : '/api/drone_imagery/calculate_statistics',
            type : 'POST',
            data : {
                'observation_variable_id_list':JSON.stringify(manage_drone_imagery_calculate_statistics_trait_ids),
                'field_trial_id_list':JSON.stringify([manage_drone_imagery_calculate_statistics_field_trial_id]),
                'statistics_select':manage_drone_imagery_calculate_statistics_select
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Variable</th><th>Statistics</th></tr></thead><tbody>';
                for (var i=0; i<response.length; i++) {
                    html = html + '<tr><td>'+response[i][0]+'</td><td>'+response[i][1]+'</td></tr>';
                }
                html = html + '</tbody></table>';
                jQuery('#drone_imagery_calculate_statistics_result_div').html(html);

                Workflow.complete("#drone_imagery_calculate_statistics_select_step");
                Workflow.focus('#drone_imagery_calculate_statistics_workflow', 3);
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating statistics!')
            }
        });
    });

    //
    // Keras CNN Training JS
    //

    var manage_drone_imagery_train_keras_drone_run_ids = [];
    var manage_drone_imagery_train_keras_field_trial_id;
    var manage_drone_imagery_train_keras_trait_id;
    var manage_drone_imagery_train_keras_plot_polygon_type_ids = [];

    jQuery('#keras_cnn_drone_imagery_link').click(function(){
        get_select_box('trials', 'drone_imagery_train_keras_cnn_trial_select_div', { 'name' : 'drone_imagery_train_keras_cnn_field_trial_id', 'id' : 'drone_imagery_train_keras_cnn_field_trial_id', 'empty':1, 'multiple':0 });
        jQuery('#drone_imagery_train_keras_cnn_dialog').modal('show');

        manage_drone_imagery_train_keras_drone_run_ids = [];
        manage_drone_imagery_train_keras_field_trial_id = undefined;
        manage_drone_imagery_train_keras_trait_id = undefined;
        manage_drone_imagery_train_keras_plot_polygon_type_ids = [];
    });

    jQuery('#drone_imagery_train_keras_model_field_trial_select_step').click(function(){
        manage_drone_imagery_train_keras_field_trial_id = jQuery('#drone_imagery_train_keras_cnn_field_trial_id').val();
        if (manage_drone_imagery_train_keras_field_trial_id == '') {
            alert('Please select a field trial first!');
        } else {
            get_select_box('traits', 'drone_imagery_train_keras_cnn_trait_select_div', { 'name' : 'drone_imagery_train_keras_cnn_trait_id', 'id' : 'drone_imagery_train_keras_cnn_trait_id', 'empty':1, 'multiple':0, 'trial_ids':manage_drone_imagery_train_keras_field_trial_id, 'stock_type':'plot' });

            jQuery('#drone_image_train_keras_drone_runs_table').DataTable({
                destroy : true,
                ajax : '/api/drone_imagery/drone_runs?select_checkbox_name=train_keras_drone_imagery_drone_run_select&field_trial_id='+manage_drone_imagery_train_keras_field_trial_id
            });

            Workflow.complete("#drone_imagery_train_keras_model_field_trial_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 2);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_trait_select_step').click(function(){
        manage_drone_imagery_train_keras_trait_id = jQuery('#drone_imagery_train_keras_cnn_trait_id').val();
        if (manage_drone_imagery_train_keras_trait_id == undefined || manage_drone_imagery_train_keras_trait_id == 'null' || manage_drone_imagery_train_keras_trait_id == '') {
            alert('Please select a phenotyped trait first!');
        } else {
            Workflow.complete("#drone_imagery_train_keras_model_trait_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 3);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_drone_run_select_step').click(function(){
        jQuery('input[name="train_keras_drone_imagery_drone_run_select"]:checked').each(function() {
            manage_drone_imagery_train_keras_drone_run_ids.push(jQuery(this).val());
        });
        if (manage_drone_imagery_train_keras_drone_run_ids.length < 1){
            alert('Please select at least one drone run!');
        } else {

            jQuery('#drone_image_train_keras_plot_polygon_image_type_table').DataTable({
                destroy : true,
                paging : false,
                ajax : '/api/drone_imagery/plot_polygon_types?select_checkbox_name=train_keras_drone_imagery_plot_polygon_type_select&field_trial_id='+manage_drone_imagery_train_keras_field_trial_id+'&drone_run_ids='+JSON.stringify(manage_drone_imagery_train_keras_drone_run_ids)
            });

            Workflow.complete("#drone_imagery_train_keras_model_drone_run_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 4);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_plot_polygon_type_select_step').click(function(){
        jQuery('input[name="train_keras_drone_imagery_plot_polygon_type_select"]:checked').each(function() {
            manage_drone_imagery_train_keras_plot_polygon_type_ids.push(jQuery(this).val());
        });
        if (manage_drone_imagery_train_keras_plot_polygon_type_ids.length < 1){
            alert('Please select at least one plot polygon type!');
        } else {
            Workflow.complete("#drone_imagery_train_keras_model_plot_polygon_type_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 5);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_confirm_step').click(function(){
        jQuery.ajax({
            url : '/api/drone_imagery/train_keras_model?field_trial_id='+manage_drone_imagery_train_keras_field_trial_id+'&trait_id='+manage_drone_imagery_train_keras_trait_id+'&drone_run_ids='+JSON.stringify(manage_drone_imagery_train_keras_drone_run_ids)+'&plot_polygon_type_ids='+JSON.stringify(manage_drone_imagery_train_keras_plot_polygon_type_ids),
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error training keras model!')
            }
        });
    });

    //
    // Image Rotating JS
    //

    var rotate_stitched_image_id;
    var rotate_drone_run_band_project_id;
    var rotate_stitched_image_degrees;

    jQuery(document).on('click', 'button[name="project_drone_imagery_rotate_image"]', function() {
        showManageDroneImagerySection('manage_drone_imagery_rotate_div');

        rotate_stitched_image_id = jQuery(this).data('stitched_image_id');
        rotate_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        rotate_stitched_image_degrees = 0.00;

        showRotateImage(rotate_stitched_image_id, 'drone_imagery_rotate_original_stitched_div', 'manage_drone_imagery_rotate_load_div');
    });

    jQuery('#drone_imagery_rotate_stitched_view').click(function(){
        rotate_stitched_image_degrees = parseFloat(jQuery('#drone_imagery_rotate_degrees_input').val());
        applyShowRotateImage(rotate_stitched_image_id, rotate_drone_run_band_project_id, rotate_stitched_image_degrees, 'drone_imagery_rotate_original_stitched_div');
    });

    jQuery('#drone_imagery_rotate_stitched_restart').click(function(){
        showRotateImage(rotate_stitched_image_id, 'drone_imagery_rotate_original_stitched_div', 'manage_drone_imagery_rotate_load_div');
        rotate_stitched_image_degrees = 0.00;
    });

    function applyShowRotateImage(rotate_stitched_image_id, rotate_drone_run_band_project_id, rotate_stitched_image_degrees, canvas_div_id) {
        jQuery.ajax({
            url : '/api/drone_imagery/rotate_image?image_id='+rotate_stitched_image_id+'&drone_run_band_project_id='+rotate_drone_run_band_project_id+'&angle='+rotate_stitched_image_degrees+'&view_only=1',
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                };
                image.src = response.rotated_image_url;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error getting rotated image!')
            }
        });
    }

    function showRotateImage(rotate_stitched_image_id, canvas_div_id, load_div_id) {
        jQuery.ajax({
            url : '/api/drone_imagery/get_image?image_id='+rotate_stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                    jQuery('#'+load_div_id).hide();
                };
                image.src = response.image_url;

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    jQuery('#drone_imagery_rotate_stitched_crosshairs').click(function(){
        drawRotateCrosshairs(getRandomColor(), 'drone_imagery_rotate_original_stitched_div');
    });

    function drawRotateCrosshairs(color, canvas_div_id) {
        var canvas = document.getElementById(canvas_div_id);
        var rotate_image_width = canvas.width;
        var rotate_image_height = canvas.height;
        var ctx = canvas.getContext("2d");

        ctx.beginPath();
        ctx.moveTo(rotate_image_width/2,0);
        ctx.lineTo(rotate_image_width/2, rotate_image_height);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(rotate_image_width*1/4,0);
        ctx.lineTo(rotate_image_width*1/4, rotate_image_height);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(rotate_image_width*3/4,0);
        ctx.lineTo(rotate_image_width*3/4, rotate_image_height);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0,rotate_image_height/2);
        ctx.lineTo(rotate_image_width, rotate_image_height/2);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0,rotate_image_height*1/4);
        ctx.lineTo(rotate_image_width, rotate_image_height*1/4);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0,rotate_image_height*3/4);
        ctx.lineTo(rotate_image_width, rotate_image_height*3/4);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();
    }

    jQuery('#drone_imagery_rotate_stitched_submit').click(function() {
        var rotate_stitched_image_degrees_text = jQuery('#drone_imagery_rotate_degrees_input').val();
        if (rotate_stitched_image_degrees_text == '') {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        if (isNaN(rotate_stitched_image_degrees_text)) {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        rotate_stitched_image_degrees = parseFloat(rotate_stitched_image_degrees_text);
        jQuery.ajax({
            url : '/api/drone_imagery/rotate_image?image_id='+rotate_stitched_image_id+'&drone_run_band_project_id='+rotate_drone_run_band_project_id+'&angle='+rotate_stitched_image_degrees,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving rotated image image!')
            }
        });
    });

    //
    // Image Cropping JS
    //

    var ctx;
    var trial_id;
    var stitched_image_id;
    var rotated_stitched_image_id;
    var stitched_image;
    var drone_run_project_id;
    var drone_run_band_project_id;
    var crop_points = [];
    var crop_display_points = [];
    var dronecroppingImg;

    jQuery(document).on('click', 'button[name="project_drone_imagery_crop_image"]', function() {
        trial_id = jQuery(this).data('field_trial_id');
        stitched_image_id = jQuery(this).data('stitched_image_id');
        stitched_image = jQuery(this).data('stitched_image');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');
        drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        rotated_stitched_image_id = jQuery(this).data('rotated_stitched_image_id');

        get_select_box('drone_imagery_parameter_select','plot_polygons_previously_saved_image_cropping_templates', {'name':'drone_imagery_previously_saved_image_cropping_select', 'id':'drone_imagery_previously_saved_image_cropping_select', 'empty':1, 'field_trial_id':trial_id, 'parameter':'image_cropping' });

        showManageDroneImagerySection('manage_drone_imagery_crop_div');

        showCropImageStart(rotated_stitched_image_id, 'drone_imagery_crop_original_stitched_div', 'manage_drone_imagery_crop_load_div');
    });

    function showCropImageStart(rotated_stitched_image_id, canvas_div_id, load_div_id) {
        crop_points = [];
        crop_display_points = [];
        jQuery.ajax({
            url : '/api/drone_imagery/get_image?image_id='+rotated_stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                    jQuery('#'+load_div_id).hide();
                };
                image.src = response.image_url;
                dronecroppingImg = canvas;
                dronecroppingImg.onmousedown = GetCoordinatesCroppedImage;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    function FindPosition(oElement) {
        if(typeof( oElement.offsetParent ) != "undefined") {
            for(var posX = 0, posY = 0; oElement; oElement = oElement.offsetParent) {
                posX += oElement.offsetLeft;
                posY += oElement.offsetTop;
            }
            return [ posX, posY ];
        } else {
            return [ oElement.x, oElement.y ];
        }
    }

    function GetCoordinatesCroppedImage(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(dronecroppingImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (crop_points.length < 4){
            crop_points.push({x:PosX, y:PosY});
            crop_display_points.push({x:PosX, y:PosY});
        } else {
            crop_display_points.push({x:PosX, y:PosY});
        }
        if (crop_display_points.length > 5){
            crop_points = [];
            crop_display_points = [];
        }
        drawPolyline(crop_display_points);
        drawWaypoints(crop_display_points, undefined, 0);
    }

    function drawPolyline(points){
        if (points.length == 4) {
            points.push(points[0]);
        }
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.moveTo(points[0].x,points[0].y);
            for(var i=1;i<points.length;i++){
                ctx.lineTo(points[i].x,points[i].y);
            }
            ctx.strokeStyle='blue';
            ctx.lineWidth=5;
            ctx.stroke();
        }
    }

    function drawWaypoints(points, label, random_factor){
        var plot_polygon_random_number = Math.random() * random_factor;
        if (points.length > 0 && label != undefined) {
            if (drone_imagery_plot_polygons_removed_numbers.includes(label)) {
                ctx.font = "bold 18px Arial";
                ctx.fillStyle = 'blue';
                ctx.fillText('NA', points[0].x + 3, points[0].y + 14 + plot_polygon_random_number);
            } else {
                ctx.font = "bold 18px Arial";
                ctx.fillStyle = 'red';
                ctx.fillText(label, points[0].x + 3, points[0].y + 14 + plot_polygon_random_number);
                //ctx.fillText(label.toString().substring(label.length - 3), points[0].x + 3, points[0].y + 14 + plot_polygon_random_number);
            }
        }
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.arc(points[i].x,points[i].y,4,0,Math.PI*2);
            ctx.closePath();
            ctx.strokeStyle='black';
            ctx.lineWidth=1;
            ctx.stroke();
            ctx.fillStyle='white';
            ctx.fill();
        }
    }

    jQuery(document).on('click', '#drone_imagery_crop_stitched_submit', function(){
        jQuery.ajax({
            url : '/api/drone_imagery/crop_image?image_id='+rotated_stitched_image_id+'&polygon='+JSON.stringify(crop_points)+'&drone_run_band_project_id='+drone_run_band_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error cropping image!')
            }
        });
    });

    jQuery(document).on('click', '#drone_imagery_cropping_use_previous_cropping', function() {
        var plot_polygons_use_previously_saved_cropping = jQuery('#drone_imagery_previously_saved_image_cropping_select').val();
        jQuery.ajax({
            url : '/api/drone_imagery/retrieve_parameter_template?plot_polygons_template_projectprop_id='+plot_polygons_use_previously_saved_cropping,
            success: function(response){
                console.log(response);
                jQuery.ajax({
                    url : '/api/drone_imagery/crop_image?image_id='+rotated_stitched_image_id+'&polygon='+JSON.stringify(response.parameter[0])+'&drone_run_band_project_id='+drone_run_band_project_id,
                    beforeSend: function() {
                        jQuery("#working_modal").modal("show");
                    },
                    success: function(response){
                        console.log(response);
                        jQuery("#working_modal").modal("hide");
                        location.reload();
                    },
                    error: function(response){
                        jQuery("#working_modal").modal("hide");
                        alert('Error cropping image!')
                    }
                });
            },
            error: function(response){
                alert('Error retrieving saved cropping template!');
            }
        });
        return;
    });

    //
    // Denoising JS
    //

    var gridData = new Array();

    jQuery(document).on('click', 'button[name="project_drone_imagery_denoise"]', function() {
        var trial_id = jQuery(this).data('field_trial_id');
        var drone_run_project_id = jQuery(this).data('drone_run_project_id');
        var drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        var cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        var stitched_image = jQuery(this).data('stitched_image');
        var cropped_stitched_image = jQuery(this).data('cropped_stitched_image');

        jQuery.ajax({
            url : '/api/drone_imagery/denoise?image_id='+cropped_stitched_image_id+'&drone_run_band_project_id='+drone_run_band_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error denoising image!')
            }
        });

    });

    //
    //Define Plot Polygons JS
    //

    var canvas;
    var background_image_url;
    var background_image_width;
    var background_image_height;
    var plot_polygons_display_points = [];
    var plot_polygons_ind_points = [];
    var plot_polygons_ind_4_points = [];
    var drone_imagery_plot_polygons = {};
    var drone_imagery_plot_generated_polygons = {};
    var drone_imagery_plot_polygons_display = {};
    var plot_polygons_generated_polygons = [];
    var drone_imagery_plot_polygons_removed_numbers = [];
    var field_trial_layout_response = {};
    var plot_polygon_name;
    var plotpolygonsImg;
    var drone_imagery_plot_polygons_available_stock_names = [];
    var trial_id;
    var cropped_stitched_image_id;
    var denoised_stitched_image_id;
    var background_removed_stitched_image_id;
    var drone_run_project_id;
    var drone_run_band_project_id;
    var assign_plot_polygons_type;

    jQuery(document).on('click', 'button[name="project_drone_imagery_plot_polygons"]', function(){
        trial_id = jQuery(this).data('field_trial_id');
        cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        background_removed_stitched_image_id = jQuery(this).data('background_removed_stitched_image_id');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');
        drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        assign_plot_polygons_type = jQuery(this).data('assign_plot_polygons_type');

        get_select_box('drone_imagery_parameter_select','plot_polygons_previously_saved_plot_polygon_templates', {'empty':1, 'field_trial_id':trial_id, 'parameter':'plot_polygons' });

        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        field_trial_layout_response = {};

        showManageDroneImagerySection('manage_drone_imagery_plot_polygons_div');

        showPlotPolygonStart(background_removed_stitched_image_id, drone_run_band_project_id, 'drone_imagery_plot_polygons_original_stitched_div', 'drone_imagery_plot_polygons_top_section', 'manage_drone_imagery_plot_polygons_load_div');

        showPlotPolygonTableStart(trial_id, 'drone_imagery_trial_layout_div', 'drone_imagery_layout_table');
    });

    function showPlotPolygonTableStart(trial_id, layout_div, layout_table){
        jQuery.ajax({
            url : '/ajax/breeders/trial/'+trial_id+'/layout_table',
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                field_trial_layout_response = response;
                var layout = field_trial_layout_response.output;
                for (var i=1; i<layout.length; i++) {
                    drone_imagery_plot_polygons_available_stock_names.push(layout[i][0]);
                }
                droneImageryDrawLayoutTable(response, {}, layout_div, layout_table);
                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving trial layout and design!')
            }
        });
    }

    function showPlotPolygonStart(background_removed_stitched_image_id, drone_run_band_project_id, canvas_div_id, info_div_id, load_div_id){
        //jQuery.ajax({
        //    url : '/api/drone_imagery/get_contours?image_id='+background_removed_stitched_image_id+'&drone_run_band_project_id='+drone_run_band_project_id,
        //    beforeSend: function() {
        //        jQuery("#working_modal").modal("show");
        //    },
        //    success: function(response){
        //        console.log(response);
        //        jQuery("#working_modal").modal("hide");
        //        background_image_url = response.image_url;

        //        background_image_width = response.image_width;
        //        background_image_height = response.image_height;

        //        var top_section_html = '<h4>Total Image Width: '+response.image_width+'px. Total Image Height: '+response.image_height+'px.</h4>';
        //        top_section_html = top_section_html + '<button class="btn btn-default btn-sm" id="drone_imagery_plot_polygons_switch" data-image_url="'+response.image_url+'" data-image_fullpath="'+response.image_fullpath+'" data-contours_image_url="'+response.contours_image_url+'" data-contours_image_fullpath="'+response.contours_image_fullpath+'">Switch Image View</button><br/><br/>';
        //        jQuery('#'+info_div_id).html(top_section_html);

        //        canvas = document.getElementById(canvas_div_id);
        //        ctx = canvas.getContext('2d');
        //        draw_canvas_image(background_image_url, 0);

        //        plotpolygonsImg = document.getElementById(canvas_div_id);
                //plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygons;
        //        plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygonsPoint;

        //        jQuery('#'+load_div_id).hide();

        //    },
        //    error: function(response){
        //        jQuery("#working_modal").modal("hide");
        //        alert('Error retrieving contours for image!')
        //    }
        //});

        jQuery.ajax({
            url : '/api/drone_imagery/get_image?image_id='+background_removed_stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                background_image_url = response.image_url;

                background_image_width = response.image_width;
                background_image_height = response.image_height;

                var top_section_html = '<h4>Total Image Width: '+response.image_width+'px. Total Image Height: '+response.image_height+'px.</h4>';

                jQuery('#'+info_div_id).html(top_section_html);

                canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                draw_canvas_image(background_image_url, 0);

                plotpolygonsImg = document.getElementById(canvas_div_id);
                //plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygons;
                plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygonsPoint;

                jQuery('#'+load_div_id).hide();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving plot polygon image!')
            }
        });
    }

    var drone_imagery_plot_polygon_click_type = '';
    jQuery('#drone_imagery_plot_polygons_top_left_click').click(function(){
        alert('Now click the top left corner of your field on the image below.');
        drone_imagery_plot_polygon_click_type = 'top_left';
    });
    jQuery('#drone_imagery_plot_polygons_top_right_click').click(function(){
        alert('Now click the top right corner of your field on the image below.');
        drone_imagery_plot_polygon_click_type = 'top_right';
    });
    jQuery('#drone_imagery_plot_polygons_bottom_left_click').click(function(){
        alert('Now click the bottom left corner of your field on the image below.');
        drone_imagery_plot_polygon_click_type = 'bottom_left';
    });
    jQuery('#drone_imagery_plot_polygons_bottom_right_click').click(function(){
        alert('Now click the bottom right corner of your field on the image below.');
        drone_imagery_plot_polygon_click_type = 'bottom_right';
    });
    jQuery(document).on('click', '#drone_imagery_plot_polygons_get_distance', function(){
        alert('Click on two points in image. The distance will be returned.');
        drone_imagery_plot_polygon_click_type = 'get_distance';
        return false;
    });

    var drone_imagery_plot_polygon_current_background_toggle = 1;
    jQuery(document).on('click', '#drone_imagery_plot_polygons_switch', function(){
        var image_url;
        if (drone_imagery_plot_polygon_current_background_toggle == 0) {
            drone_imagery_plot_polygon_current_background_toggle = 1;
            image_url = jQuery(this).data('contours_image_url');
        } else if (drone_imagery_plot_polygon_current_background_toggle == 1) {
            drone_imagery_plot_polygon_current_background_toggle = 0;
            image_url = jQuery(this).data('image_url');
        }
        draw_canvas_image(image_url, plot_polygons_total_height_generated/plot_polygons_num_rows_generated);

        return;
    });

    jQuery('#plot_polygons_use_previously_saved_template').click(function() {
        var plot_polygons_use_previously_saved_template = jQuery('#drone_imagery_plot_polygon_select').val();
        if (plot_polygons_use_previously_saved_template == '') {
            alert('Please select a previously saved template before trying to apply it. If there is not a template listed, then you can create one using the templating tool above.');
            return;
        }

        jQuery.ajax({
            url : '/api/drone_imagery/retrieve_parameter_template?plot_polygons_template_projectprop_id='+plot_polygons_use_previously_saved_template,
            success: function(response){
                console.log(response);

                drone_imagery_plot_polygons_display = response.parameter;
                drone_imagery_plot_polygons = response.parameter;

                draw_canvas_image(background_image_url, 0);
                droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons, 'drone_imagery_trial_layout_div', 'drone_imagery_layout_table');
                droneImageryRectangleLayoutTable(drone_imagery_plot_polygons, 'drone_imagery_generated_polygons_div', 'drone_imagery_generated_polygons_table', 'drone_imagery_plot_polygons_generated_assign', 'drone_imagery_plot_polygons_submit_bottom');
            },
            error: function(response){
                alert('Error retrieving plot polygons template!');
            }
        });
        return;
    });

    var plot_polygons_num_rows_generated;
    var plot_polygons_num_cols_generated;
    var plot_polygons_number_generated;
    var plot_polygons_total_height_generated;
    var plot_polygons_template_dimensions = [];

    jQuery('#drone_imagery_plot_polygons_rectangles_apply').click(function() {
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];

        var num_rows_val = jQuery('#drone_imagery_plot_polygons_num_rows').val();
        var num_cols_val = jQuery('#drone_imagery_plot_polygons_num_cols').val();
        var section_top_row_left_offset_val = jQuery('#drone_imagery_plot_polygons_top_row_left_offset').val();
        var section_bottom_row_left_offset_val = jQuery('#drone_imagery_plot_polygons_bottom_row_left_offset').val();
        var section_left_column_top_offset_val = jQuery('#drone_imagery_plot_polygons_left_column_top_offset').val();
        var section_left_column_bottom_offset_val = jQuery('#drone_imagery_plot_polygons_left_column_bottom_offset').val();
        var section_top_row_right_offset_val = jQuery('#drone_imagery_plot_polygons_top_row_right_offset').val();
        var section_right_column_bottom_offset_val = jQuery('#drone_imagery_plot_polygons_right_col_bottom_offset').val();

        plotPolygonsRectanglesApply(num_rows_val, num_cols_val, section_top_row_left_offset_val, section_bottom_row_left_offset_val, section_left_column_top_offset_val, section_left_column_bottom_offset_val, section_top_row_right_offset_val, section_right_column_bottom_offset_val, 'drone_imagery_generated_polygons_div', 'drone_imagery_generated_polygons_table', 'drone_imagery_plot_polygons_generated_assign', 'drone_imagery_plot_polygons_submit_bottom', 'drone_imagery_plot_polygons_active_templates');
    });

    function plotPolygonsRectanglesApply(num_rows_val, num_cols_val, section_top_row_left_offset_val, section_bottom_row_left_offset_val, section_left_column_top_offset_val, section_left_column_bottom_offset_val, section_top_row_right_offset_val, section_right_column_bottom_offset_val, plot_polygons_assignment_info, plot_polygons_assignment_table, plot_polygons_generate_assignment_button, plot_polygon_assignment_submit_button, drone_imagery_plot_polygons_active_templates) {
        if (num_rows_val == ''){
            alert('Please give the number of rows!');
            return;
        }
        if (num_cols_val == ''){
            alert('Please give the number of columns!');
            return;
        }
        if (section_top_row_left_offset_val == ''){
            alert('Please give the top-most rows left margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_bottom_row_left_offset_val == ''){
            alert('Please give the bottom-most rows left margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_left_column_top_offset_val == ''){
            alert('Please give the left-most columns top margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_left_column_bottom_offset_val == ''){
            alert('Please give the left-most columns bottom margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_top_row_right_offset_val == ''){
            alert('Please give the top-most rows right margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_right_column_bottom_offset_val == ''){
            alert('Please give the right-most columns bottom margin! This can be 0 if there is no offset.');
            return;
        }

        plot_polygons_num_rows_generated = parseInt(num_rows_val);
        plot_polygons_num_cols_generated = parseInt(num_cols_val);

        var section_width = background_image_width;
        var section_height = background_image_height;
        var section_top_row_left_offset = parseInt(section_top_row_left_offset_val);
        var section_bottom_row_left_offset = parseInt(section_bottom_row_left_offset_val);
        var section_left_column_top_offset = parseInt(section_left_column_top_offset_val);
        var section_left_column_bottom_offset = parseInt(section_left_column_bottom_offset_val);
        var section_top_row_right_offset = parseInt(section_top_row_right_offset_val);
        var section_right_column_bottom_offset = parseInt(section_right_column_bottom_offset_val);

        var total_gradual_left_shift = section_bottom_row_left_offset - section_top_row_left_offset;
        var col_left_shift_increment = total_gradual_left_shift / plot_polygons_num_rows_generated;

        var total_gradual_vertical_shift = section_right_column_bottom_offset - section_left_column_bottom_offset;
        var col_vertical_shift_increment = total_gradual_vertical_shift / plot_polygons_num_cols_generated;

        var col_width = (section_width - section_top_row_left_offset - section_top_row_right_offset) / plot_polygons_num_cols_generated;
        var row_height = (section_height - section_left_column_top_offset - section_left_column_bottom_offset) / plot_polygons_num_rows_generated;

        var x_pos = section_top_row_left_offset;
        var y_pos = section_left_column_top_offset;

        var row_num = 1;
        for (var i=0; i<plot_polygons_num_rows_generated; i++) {
            for (var j=0; j<plot_polygons_num_cols_generated; j++) {
                var x_pos_val = x_pos;
                var y_pos_val = y_pos;
                plot_polygons_generated_polygons.push([
                    {x:x_pos_val, y:y_pos_val},
                    {x:x_pos_val + col_width, y:y_pos_val},
                    {x:x_pos_val + col_width, y:y_pos_val + row_height},
                    {x:x_pos_val, y:y_pos_val + row_height}
                ]);
                x_pos = x_pos + col_width;
                y_pos = y_pos - col_vertical_shift_increment;
            }
            x_pos = section_top_row_left_offset + (row_num * col_left_shift_increment);
            y_pos = y_pos + row_height + total_gradual_vertical_shift;
            row_num = row_num + 1;
        }
        //console.log(plot_polygons_generated_polygons);

        plot_polygons_total_height_generated = row_height * plot_polygons_num_rows_generated;
        plot_polygons_number_generated = plot_polygons_generated_polygons.length;

        var drone_imagery_plot_polygons_new = {};
        var drone_imagery_plot_polygons_display_new = {};

        for (var i=0; i<plot_polygons_generated_polygons.length; i++) {
            plot_polygons_ind_4_points = plot_polygons_generated_polygons[i];
            plot_polygons_display_points = plot_polygons_ind_4_points;
            if (plot_polygons_display_points.length == 4) {
                plot_polygons_display_points.push(plot_polygons_ind_4_points[0]);
            }
            drawPolyline(plot_polygons_display_points);
            drawWaypoints(plot_polygons_display_points, i, 0);
            drone_imagery_plot_generated_polygons[i] = plot_polygons_ind_4_points;
            drone_imagery_plot_polygons_new[i] = plot_polygons_ind_4_points;
            drone_imagery_plot_polygons_display[i] = plot_polygons_display_points;
            drone_imagery_plot_polygons_display_new[i] = plot_polygons_display_points;
        }

        plot_polygons_template_dimensions.push({
            'num_rows':plot_polygons_num_rows_generated,
            'num_cols':plot_polygons_num_cols_generated,
            'total_plot_polygons':plot_polygons_num_rows_generated*plot_polygons_num_cols_generated,
            'plot_polygons':drone_imagery_plot_polygons_new,
            'plot_polygons_display':drone_imagery_plot_polygons_display_new
        });

        droneImageryDrawPlotPolygonActiveTemplatesTable(drone_imagery_plot_polygons_active_templates, plot_polygons_template_dimensions, drone_imagery_plot_generated_polygons, drone_imagery_plot_polygons_display);

        droneImageryRectangleLayoutTable(drone_imagery_plot_generated_polygons, plot_polygons_assignment_info, plot_polygons_assignment_table, plot_polygons_generate_assignment_button, plot_polygon_assignment_submit_button);
    }

    function plotPolygonsTemplatePaste(posx, posy, plot_polygon_template_id, plot_polygons_assignment_info, plot_polygons_assignment_table, plot_polygons_generate_assignment_button, plot_polygon_assignment_submit_button, drone_imagery_plot_polygons_active_templates) {
        var plot_polygon_template_to_paste = plot_polygons_template_dimensions[plot_polygon_template_id];

        var plot_polygons_previous_plot_polygons = plot_polygon_template_to_paste['plot_polygons'];
        plot_polygons_num_rows_generated = plot_polygon_template_to_paste['num_rows'];
        plot_polygons_num_cols_generated = plot_polygon_template_to_paste['num_cols'];

        var section_width = background_image_width;
        var section_height = background_image_height;

        var plot_polygon_top_left_position = plot_polygons_previous_plot_polygons[0][0];
        var plot_polygon_template_paste_x_diff = plot_polygon_top_left_position['x'] - posx;
        var plot_polygon_template_paste_y_diff = plot_polygon_top_left_position['y'] - posy;

        for (var i in plot_polygons_previous_plot_polygons) {
            plot_polygons_generated_polygons.push([
                {x:plot_polygons_previous_plot_polygons[i][0]['x'] - plot_polygon_template_paste_x_diff, y:plot_polygons_previous_plot_polygons[i][0]['y']- plot_polygon_template_paste_y_diff},
                {x:plot_polygons_previous_plot_polygons[i][1]['x'] - plot_polygon_template_paste_x_diff, y:plot_polygons_previous_plot_polygons[i][1]['y'] - plot_polygon_template_paste_y_diff},
                {x:plot_polygons_previous_plot_polygons[i][2]['x'] - plot_polygon_template_paste_x_diff, y:plot_polygons_previous_plot_polygons[i][2]['y'] - plot_polygon_template_paste_y_diff},
                {x:plot_polygons_previous_plot_polygons[i][3]['x'] - plot_polygon_template_paste_x_diff, y:plot_polygons_previous_plot_polygons[i][3]['y'] - plot_polygon_template_paste_y_diff}
            ]);
        }

        plot_polygons_number_generated = plot_polygons_generated_polygons.length;
        console.log(plot_polygons_generated_polygons);

        var drone_imagery_plot_polygons_new = {};
        var drone_imagery_plot_polygons_display_new = {};

        for (var i=0; i<plot_polygons_generated_polygons.length; i++) {
            plot_polygons_ind_4_points = plot_polygons_generated_polygons[i];
            plot_polygons_display_points = plot_polygons_ind_4_points;
            if (plot_polygons_display_points.length == 4) {
                plot_polygons_display_points.push(plot_polygons_ind_4_points[0]);
            }
            drawPolyline(plot_polygons_display_points);
            drawWaypoints(plot_polygons_display_points, i, 0);
            drone_imagery_plot_generated_polygons[i] = plot_polygons_ind_4_points;
            drone_imagery_plot_polygons_new[i] = plot_polygons_ind_4_points;
            drone_imagery_plot_polygons_display[i] = plot_polygons_display_points;
            drone_imagery_plot_polygons_display_new[i] = plot_polygons_display_points;
        }

        plot_polygons_template_dimensions.push({
            'num_rows':plot_polygons_num_rows_generated,
            'num_cols':plot_polygons_num_cols_generated,
            'total_plot_polygons':plot_polygons_num_rows_generated*plot_polygons_num_cols_generated,
            'plot_polygons':drone_imagery_plot_polygons_new,
            'plot_polygons_display':drone_imagery_plot_polygons_display_new
        });

        droneImageryDrawPlotPolygonActiveTemplatesTable(drone_imagery_plot_polygons_active_templates, plot_polygons_template_dimensions);

        droneImageryRectangleLayoutTable(drone_imagery_plot_generated_polygons, plot_polygons_assignment_info, plot_polygons_assignment_table, plot_polygons_generate_assignment_button, plot_polygon_assignment_submit_button);
    }

    function droneImageryDrawPlotPolygonActiveTemplatesTable(div_id, plot_polygons_template_dimensions){
        var html = '<table class="table table-bordered table-hover"><thead><tr><th>Template Number</th><th>Rows</th><th>Columns</th><th>Total Polygons</th><th>Options</th></tr></thead><tbody>';
        for (var i=0; i<plot_polygons_template_dimensions.length; i++) {
            html = html + '<tr><td>'+i+'</td><td>'+plot_polygons_template_dimensions[i]['num_rows']+'</td><td>'+plot_polygons_template_dimensions[i]['num_cols']+'</td><td>'+plot_polygons_template_dimensions[i]['total_plot_polygons']+'</td><td><button class="btn btn-sm btn-primary" name="drone_imagery_plot_polygon_template_options" data-plot_polygon_template_id="'+i+'" >Options</button></td></tr>';
        }
        html = html + '</tbody></table>';
        jQuery('#'+div_id).html(html);
    }

    var drone_imagery_current_plot_polygon_index_options_id = '';
    jQuery(document).on('click', 'button[name="drone_imagery_plot_polygon_template_options"]', function(){
        jQuery('#drone_imagery_plot_polygon_template_options_dialog').modal('show');
        drone_imagery_current_plot_polygon_index_options_id = jQuery(this).data('plot_polygon_template_id');
    });

    jQuery('#drone_imagery_plot_polygon_template_options_paste_click').click(function(){
        jQuery('#drone_imagery_plot_polygon_template_options_dialog').modal('hide');
        alert('Click on where the top left corner of the template will be pasted.');
        drone_imagery_plot_polygon_click_type = 'plot_polygon_template_paste';
    });

    jQuery('input[name=drone_imagery_plot_polygons_autocomplete]').autocomplete({
        source: drone_imagery_plot_polygons_available_stock_names
    });

    jQuery(document).on('click', '#drone_imagery_plot_polygons_clear', function(){
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        plot_polygons_generated_polygons = [];
        plot_polygons_template_dimensions = [];
        drone_imagery_plot_polygons_removed_numbers = [];
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw_canvas_image(background_image_url, 0);
        jQuery('#drone_imagery_generated_polygons_div').html('');
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons, 'drone_imagery_trial_layout_div', 'drone_imagery_layout_table');
        droneImageryDrawPlotPolygonActiveTemplatesTable("drone_imagery_plot_polygons_active_templates", plot_polygons_template_dimensions);
    });

    jQuery(document).on('click', '#drone_imagery_plot_polygons_clear_one', function(){
        jQuery('#drone_imagery_plot_polygon_remove_polygon').modal('show');
        return false;
    });

    jQuery('#drone_imagery_plot_polygon_remove_polygon_submit').click(function(){
        var polygon_number = jQuery('#drone_imagery_plot_polygon_remove_polygon_number').val();
        drone_imagery_plot_polygons_removed_numbers.push(polygon_number);
        draw_canvas_image(background_image_url, plot_polygons_total_height_generated/plot_polygons_num_rows_generated);
        return false;
    });

    function draw_canvas_image(image_url, random_scaling) {
        var image = new Image();
        image.onload = function () {
            canvas.width = this.naturalWidth;
            canvas.height = this.naturalHeight;
            ctx.drawImage(this, 0, 0);

            for (key in drone_imagery_plot_polygons_display) {
                var plot_polygons_display_points_again = drone_imagery_plot_polygons_display[key];
                drawPolyline(plot_polygons_display_points_again);
                drawWaypoints(plot_polygons_display_points_again, key, random_scaling);
            }
        };
        image.src = image_url;
    }

    function GetCoordinatesPlotPolygons(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(plotpolygonsImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (plot_polygons_ind_points.length <= 4){
            plot_polygons_ind_points.push({x:PosX, y:PosY});
            plot_polygons_display_points.push({x:PosX, y:PosY});

            if (plot_polygons_ind_points.length == 4) {
                plot_polygons_ind_4_points = plot_polygons_ind_points;
            }
        } else if (plot_polygons_ind_points.length > 4) {
            if (plot_polygons_display_points.length == 5) {
                jQuery('#drone_imagery_assign_plot_dialog').modal('show');
            }
            plot_polygons_ind_points = [];
        }
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points, undefined, 0);
    }

    var plot_polygons_get_distance_point_1x = '';
    var plot_polygons_get_distance_point_1y = '';

    function GetCoordinatesPlotPolygonsPoint(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(plotpolygonsImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];

        if (drone_imagery_plot_polygon_click_type == '' && drone_imagery_standard_process_plot_polygon_click_type == '') {
            alert('X Coordinate: '+PosX+'. Y Coordinate: '+PosY+'.');
        }
        else if (drone_imagery_plot_polygon_click_type == 'top_left') {
            drone_imagery_plot_polygon_click_type = '';
            jQuery('#drone_imagery_plot_polygons_left_column_top_offset').val(PosY);
            jQuery('#drone_imagery_plot_polygons_top_row_left_offset').val(PosX);
        }
        else if (drone_imagery_plot_polygon_click_type == 'top_right') {
            drone_imagery_plot_polygon_click_type = '';
            jQuery('#drone_imagery_plot_polygons_top_row_right_offset').val(background_image_width-PosX);
        }
        else if (drone_imagery_plot_polygon_click_type == 'bottom_left') {
            drone_imagery_plot_polygon_click_type = '';
            jQuery('#drone_imagery_plot_polygons_bottom_row_left_offset').val(PosX);
            jQuery('#drone_imagery_plot_polygons_left_column_bottom_offset').val(background_image_height-PosY);
        }
        else if (drone_imagery_plot_polygon_click_type == 'bottom_right') {
            drone_imagery_plot_polygon_click_type = '';
            jQuery('#drone_imagery_plot_polygons_right_col_bottom_offset').val(background_image_height-PosY);
        }
        else if (drone_imagery_plot_polygon_click_type == 'get_distance') {
            if (plot_polygons_get_distance_point_1x != '') {
                var distance = Math.round(Math.sqrt(Math.pow(plot_polygons_get_distance_point_1x - PosX, 2) + Math.pow(plot_polygons_get_distance_point_1y - PosY, 2)));
                alert('Distance='+distance+'. X1='+plot_polygons_get_distance_point_1x+'. Y1='+plot_polygons_get_distance_point_1y+'. X2='+PosX+'. Y2='+PosY);
                plot_polygons_get_distance_point_1x = '';
                plot_polygons_get_distance_point_1y = '';
                drone_imagery_plot_polygon_click_type = '';
            } else {
                plot_polygons_get_distance_point_1x = PosX;
                plot_polygons_get_distance_point_1y = PosY;
            }
        }
        else if (drone_imagery_plot_polygon_click_type == 'plot_polygon_template_paste') {
            drone_imagery_plot_polygon_click_type = '';

            if (manage_drone_imagery_standard_process_field_trial_id == undefined) {
                plotPolygonsTemplatePaste(PosX, PosY, parseInt(drone_imagery_current_plot_polygon_index_options_id), 'drone_imagery_generated_polygons_div', 'drone_imagery_generated_polygons_table', 'drone_imagery_plot_polygons_generated_assign', 'drone_imagery_plot_polygons_submit_bottom');
            }
            else {
                plotPolygonsTemplatePaste(PosX, PosY, parseInt(drone_imagery_current_plot_polygon_index_options_id), 'drone_imagery_standard_process_generated_polygons_div', 'drone_imagery_standard_process_generated_polygons_table', 'drone_imagery_standard_process_plot_polygons_generated_assign', 'drone_imagery_standard_process_plot_polygons_submit_bottom');
            }
        }
        else if (drone_imagery_standard_process_plot_polygon_click_type == 'top_left') {
            drone_imagery_standard_process_plot_polygon_click_type = '';
            jQuery('#drone_imagery_standard_process_plot_polygons_left_column_top_offset').val(PosY);
            jQuery('#drone_imagery_standard_process_plot_polygons_top_row_left_offset').val(PosX);
        }
        else if (drone_imagery_standard_process_plot_polygon_click_type == 'top_right') {
            drone_imagery_standard_process_plot_polygon_click_type = '';
            jQuery('#drone_imagery_standard_process_plot_polygons_top_row_right_offset').val(background_image_width-PosX);
        }
        else if (drone_imagery_standard_process_plot_polygon_click_type == 'bottom_left') {
            drone_imagery_standard_process_plot_polygon_click_type = '';
            jQuery('#drone_imagery_standard_process_plot_polygons_bottom_row_left_offset').val(PosX);
            jQuery('#drone_imagery_standard_process_plot_polygons_left_column_bottom_offset').val(background_image_height-PosY);
        }
        else if (drone_imagery_standard_process_plot_polygon_click_type == 'bottom_right') {
            drone_imagery_standard_process_plot_polygon_click_type = '';
            jQuery('#drone_imagery_standard_process_plot_polygons_right_col_bottom_offset').val(background_image_height-PosY);
        }
        else if (drone_imagery_standard_process_plot_polygon_click_type == 'get_distance') {
            if (plot_polygons_get_distance_point_1x != '') {
                var distance = Math.round(Math.sqrt(Math.pow(plot_polygons_get_distance_point_1x - PosX, 2) + Math.pow(plot_polygons_get_distance_point_1y - PosY, 2)));
                alert('Distance='+distance+'. X1='+plot_polygons_get_distance_point_1x+'. Y1='+plot_polygons_get_distance_point_1y+'. X2='+PosX+'. Y2='+PosY);
                plot_polygons_get_distance_point_1x = '';
                plot_polygons_get_distance_point_1y = '';
                drone_imagery_plot_polygon_click_type = '';
            } else {
                plot_polygons_get_distance_point_1x = PosX;
                plot_polygons_get_distance_point_1y = PosY;
            }
        }
    }

    jQuery('#drone_imagery_assign_plot_dialog').on('shown.bs.modal', function (e) {
        jQuery("#drone_imagery_plot_polygon_assign_plot_name").focus();
    });

    jQuery('#drone_imagery_assign_plot_dialog').on('hide.bs.modal', function (e) {
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points, plot_polygon_name, 0);
        drone_imagery_plot_polygons_display[plot_polygon_name] = plot_polygons_display_points;
        plot_polygons_display_points = [];
    });

    jQuery('#drone_imagery_plot_polygon_assign_add').click(function(){
        plot_polygon_name = jQuery('#drone_imagery_plot_polygon_assign_plot_name').val();
        if (plot_polygon_name == ''){
            alert('Please give a name name (plot name, plant name, etc)');
        }
        drone_imagery_plot_polygons[plot_polygon_name] = plot_polygons_ind_4_points;
        jQuery('#drone_imagery_assign_plot_dialog').modal('hide');
        console.log(drone_imagery_plot_polygons);
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons, 'drone_imagery_trial_layout_div', 'drone_imagery_layout_table');
    });

    jQuery('#drone_imagery_assign_plot_form').on('keyup keypress', function(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) {
            e.preventDefault();
            jQuery("#drone_imagery_plot_polygon_assign_add").trigger( "click" );
            return false;
        }
    });

    jQuery(document).on('click', 'button[name=drone_imagery_plot_polygons_submit_bottom]', function(){

        jQuery('input[name="drone_imagery_plot_polygons_autocomplete"]').each(function() {
            var stock_name = this.value;
            if (stock_name != '') {
                var polygon = drone_imagery_plot_generated_polygons[jQuery(this).data('generated_polygon_key')];
                drone_imagery_plot_polygons[stock_name] = polygon;
            }
        });

        submit_assignment_plot_polygons();
    });

    function submit_assignment_plot_polygons() {
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/assign_plot_polygons',
            dataType: "json",
            data: {
                'image_id': background_removed_stitched_image_id,
                'drone_run_band_project_id': drone_run_band_project_id,
                'stock_polygons': JSON.stringify(drone_imagery_plot_polygons),
                'assign_plot_polygons_type': assign_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }

                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving assigned plot polygons!')
            }
        });
    }

    jQuery(document).on('click', '#drone_imagery_plot_polygons_generated_assign', function() {
        generatePlotPolygonAssignments('drone_imagery_trial_layout_div', 'drone_imagery_layout_table');

        jQuery('input[name="drone_imagery_plot_polygons_autocomplete"]').each(function() {
            var stock_name = this.value;
            if (stock_name != '') {
                var polygon = drone_imagery_plot_generated_polygons[jQuery(this).data('generated_polygon_key')];
                drone_imagery_plot_polygons[stock_name] = polygon;
            }
        });
    });

    function generatePlotPolygonAssignments(trial_layout_div, trial_layout_table) {
        var plot_polygons_first_plot_start = jQuery('#drone_imagery_plot_polygons_first_plot_start').val();
        var plot_polygons_second_plot_follows = jQuery('#drone_imagery_plot_polygons_second_plot_follows').val();
        var plot_polygons_plot_orientation = jQuery('#drone_imagery_plot_polygons_plot_orientation').val();

        var plot_polygons_layout = field_trial_layout_response.output;
        var plot_polygons_plot_numbers = [];
        var plot_polygons_plot_numbers_plot_names = {};
        for (var i=1; i<plot_polygons_layout.length; i++) {
            var plot_polygons_plot_number = parseInt(plot_polygons_layout[i][2]);
            plot_polygons_plot_numbers.push(plot_polygons_plot_number);
            plot_polygons_plot_numbers_plot_names[plot_polygons_plot_number] = plot_polygons_layout[i][0];
        }
        plot_polygons_plot_numbers = plot_polygons_plot_numbers.sort(function (a, b) {  return a - b;  });
        var plot_polygons_current_plot_number_index = 0;

        var plot_polygons_template_index = 0;
        var plot_polygons_template_current = plot_polygons_template_dimensions[plot_polygons_template_index];
        var plot_polygons_template_current_num_cols = plot_polygons_template_current.num_cols;
        var plot_polygons_template_current_num_rows = plot_polygons_template_current.num_rows;
        var plot_polygons_template_current_total_plot_polygons = plot_polygons_template_current.total_plot_polygons;
        var plot_polygons_template_current_plot_polygon_index = 0;

        var plot_polygon_new_display = {};
        if (plot_polygons_first_plot_start == 'top_left') {
            var generated_polygon_key_first_plot_number = 0;
            if (plot_polygons_second_plot_follows == 'left' || plot_polygons_second_plot_follows == 'up') {
                alert('Second plot cannot follow left or up from first plot if the first plot starts at the top left, because that is physically impossible.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'right') {
                if (plot_polygons_plot_orientation == 'zigzag') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    for (var j=generated_polygon_key_first_plot_number; j<plot_polygons_plot_numbers.length + drone_imagery_plot_polygons_removed_numbers.length; j++){
                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                            plot_polygons_template_current_plot_polygon_index = plot_polygons_template_current_plot_polygon_index + 1;
                        }
                        plot_polygon_current_polygon_index = plot_polygon_current_polygon_index + 1;

                        if (plot_polygons_template_current_plot_polygon_index == plot_polygons_template_current_total_plot_polygons) {
                            plot_polygons_template_index = plot_polygons_template_index + 1;
                            plot_polygons_template_current = plot_polygons_template_dimensions[plot_polygons_template_index];
                            if (plot_polygons_template_current != undefined) {
                                plot_polygons_template_current_num_cols = plot_polygons_template_current.num_cols;
                                plot_polygons_template_current_num_rows = plot_polygons_template_current.num_rows;
                                plot_polygons_template_current_total_plot_polygons = plot_polygons_template_current.total_plot_polygons;
                                plot_polygons_template_current_plot_polygon_index = 0;
                            }
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_zigzig_polygon_index = generated_polygon_key_first_plot_number;
                    var going_right = 1;
                    var plot_polygon_previous_template_plot_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<plot_polygons_plot_numbers.length + drone_imagery_plot_polygons_removed_numbers.length; j++){

                        if (going_right == 1) {
                            plot_polygon_current_polygon_index = plot_polygon_zigzig_polygon_index;
                        }
                        if (going_right == 0) {
                            plot_polygon_current_polygon_index = plot_polygon_previous_template_plot_count + plot_polygons_template_current_num_cols - plot_polygon_column_count - 1;
                        }

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                            plot_polygons_template_current_plot_polygon_index = plot_polygons_template_current_plot_polygon_index + 1;
                        }

                        plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == plot_polygons_template_current_num_cols) {
                            plot_polygon_column_count = 0;
                            if (going_right == 1) {
                                going_right = 0;
                            } else {
                                going_right = 1;
                            }
                            plot_polygon_previous_template_plot_count = plot_polygon_previous_template_plot_count + plot_polygons_template_current_num_cols;
                        }

                        if (plot_polygons_template_current_plot_polygon_index == plot_polygons_template_current_total_plot_polygons) {
                            plot_polygons_template_index = plot_polygons_template_index + 1;
                            plot_polygons_template_current = plot_polygons_template_dimensions[plot_polygons_template_index];
                            if (plot_polygons_template_current != undefined) {
                                plot_polygons_template_current_num_cols = plot_polygons_template_current.num_cols;
                                plot_polygons_template_current_num_rows = plot_polygons_template_current.num_rows;
                                plot_polygons_template_current_total_plot_polygons = plot_polygons_template_current.total_plot_polygons;
                                plot_polygons_template_current_plot_polygon_index = 0;
                            }
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'down') {
                alert('Down not implemented if first plot starts in top left. Please contact us or try rotating your image differently before assigning plot polygons (e.g. rotate image 90 degrees clock-wise, then first plot starts in top right and you can go left for plot assignment).');
                return;
            }
        }
        if (plot_polygons_first_plot_start == 'top_right') {
            var generated_polygon_key_first_plot_number = plot_polygons_template_current_num_cols - 1;
            if (plot_polygons_second_plot_follows == 'right' || plot_polygons_second_plot_follows == 'up') {
                alert('Second plot cannot follow right or up from first plot if the first plot starts at the top right, because that is physically impossible.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'left') {
                if (plot_polygons_plot_orientation == 'zigzag') {
                    console.log(generated_polygon_key_first_plot_number);
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_previous_template_plot_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<generated_polygon_key_first_plot_number + plot_polygons_plot_numbers.length + drone_imagery_plot_polygons_removed_numbers.length; j++){

                        plot_polygon_current_polygon_index = plot_polygon_previous_template_plot_count + plot_polygons_template_current_num_cols - plot_polygon_column_count - 1;

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                            plot_polygons_template_current_plot_polygon_index = plot_polygons_template_current_plot_polygon_index + 1;
                        }

                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == plot_polygons_template_current_num_cols) {
                            plot_polygon_column_count = 0;
                            plot_polygon_previous_template_plot_count = plot_polygon_previous_template_plot_count + plot_polygons_template_current_num_cols;
                        }

                        if (plot_polygons_template_current_plot_polygon_index == plot_polygons_template_current_total_plot_polygons) {
                            plot_polygons_template_index = plot_polygons_template_index + 1;
                            plot_polygons_template_current = plot_polygons_template_dimensions[plot_polygons_template_index];
                            if (plot_polygons_template_current != undefined) {
                                plot_polygons_template_current_num_cols = plot_polygons_template_current.num_cols;
                                plot_polygons_template_current_num_rows = plot_polygons_template_current.num_rows;
                                plot_polygons_template_current_total_plot_polygons = plot_polygons_template_current.total_plot_polygons;
                                plot_polygons_template_current_plot_polygon_index = 0;
                            }
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_zigzig_polygon_index = generated_polygon_key_first_plot_number;
                    var going_left = 1;
                    var plot_polygon_previous_template_plot_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<generated_polygon_key_first_plot_number + plot_polygons_plot_numbers.length + drone_imagery_plot_polygons_removed_numbers.length; j++){

                        if (going_left == 0) {
                            plot_polygon_current_polygon_index = plot_polygon_previous_template_plot_count + plot_polygon_column_count;
                        }
                        if (going_left == 1) {
                            plot_polygon_current_polygon_index = plot_polygon_previous_template_plot_count + plot_polygons_template_current_num_cols - plot_polygon_column_count - 1;
                        }

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                            plot_polygons_template_current_plot_polygon_index = plot_polygons_template_current_plot_polygon_index + 1;
                        }

                        plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == plot_polygons_template_current_num_cols) {
                            plot_polygon_column_count = 0;
                            if (going_left == 1) {
                                going_left = 0;
                            } else {
                                going_left = 1;
                            }
                            plot_polygon_previous_template_plot_count = plot_polygon_previous_template_plot_count + plot_polygons_template_current_num_cols;
                        }

                        if (plot_polygons_template_current_plot_polygon_index == plot_polygons_template_current_total_plot_polygons) {
                            plot_polygons_template_index = plot_polygons_template_index + 1;
                            plot_polygons_template_current = plot_polygons_template_dimensions[plot_polygons_template_index];
                            if (plot_polygons_template_current != undefined) {
                                plot_polygons_template_current_num_cols = plot_polygons_template_current.num_cols;
                                plot_polygons_template_current_num_rows = plot_polygons_template_current.num_rows;
                                plot_polygons_template_current_total_plot_polygons = plot_polygons_template_current.total_plot_polygons;
                                plot_polygons_template_current_plot_polygon_index = 0;
                            }
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'down') {
                alert('Down not implemented if your first plot starts in top right. Please contact us or try rotating your image differently before assigning plot polygons (e.g. rotate image 90 degrees clockwise, then first plot starts in bottom right corner and plot assignment can follow going left).');
                return;
            }
        }
        if (plot_polygons_first_plot_start == 'bottom_left') {
            var generated_polygon_key_first_plot_number = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - plot_polygons_num_border_rows_right;
            if (plot_polygons_second_plot_follows == 'left' || plot_polygons_second_plot_follows == 'down') {
                alert('Second plot cannot follow left or down from the first plot if the first plot starts at the bottom left, because that is physically impossible.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'right') {
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var going_right = 1;
                    var plot_polygon_row_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        if (going_right == 0) {
                            plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_border_rows_right - plot_polygon_column_count - 1;
                        }
                        if (going_right == 1) {
                            plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_cols_generated + plot_polygons_num_border_rows_left + plot_polygon_column_count;
                        }

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        }

                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                            if (going_right == 1) {
                                going_right = 0;
                            } else {
                                going_right = 1;
                            }
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'zigzag') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_row_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_cols_generated + plot_polygons_num_border_rows_left + plot_polygon_column_count;

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        }

                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'up') {
                alert('Up not implemented if your first plot starts in bottom left. Please contact us or try rotating your image differently before assigning plot polygons (e.g. rotate image clockwise 90 degrees, then first plot starts in top-left corner and plot assignment can follow going right).');
                return;
            }
        }
        if (plot_polygons_first_plot_start == 'bottom_right') {
            var generated_polygon_key_first_plot_number = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - plot_polygons_num_border_rows_right - 1;
            if (plot_polygons_second_plot_follows == 'right' || plot_polygons_second_plot_follows == 'down') {
                alert('Second plot cannot follow right or down from the first plot if the first plot starts at the bottom right, because that is physically impossible.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'left') {
                if (plot_polygons_plot_orientation == 'zigzag') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        }

                        plot_polygon_current_polygon_index = plot_polygon_current_polygon_index - 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_current_polygon_index = plot_polygon_current_polygon_index - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_zigzig_polygon_index = generated_polygon_key_first_plot_number;
                    var going_left = 1;
                    var plot_polygon_row_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        if (going_left == 1) {
                            plot_polygon_current_polygon_index = plot_polygon_zigzig_polygon_index;
                        }
                        if (going_left == 0) {
                            plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_cols_generated + plot_polygons_num_border_rows_left + plot_polygon_column_count;
                        }

                        if (drone_imagery_plot_polygons_removed_numbers.includes(plot_polygon_current_polygon_index.toString())) {
                            console.log("Skipping "+plot_polygon_current_polygon_index);
                            plot_polygon_new_display[plot_polygon_current_polygon_index] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        } else {
                            plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                            drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                            plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        }

                        plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index - 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                            if (going_left == 1) {
                                going_left = 0;
                            } else {
                                going_left = 1;
                            }
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'up') {
                alert('Up not implemented if your first plot starts in bottom right. Please contact us or try rotating your image differently before assigning plot polygons (e.g. rotate image 90 degrees clockwise, then first plot starts in bottom left corner and plot assignment can follow going right).');
                return;
            }
        }

        console.log(drone_imagery_plot_polygons);
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons, trial_layout_div, trial_layout_table);

        drone_imagery_plot_polygons_display = plot_polygon_new_display;
        draw_canvas_image(background_image_url, plot_polygons_total_height_generated/plot_polygons_num_rows_generated);
    }

    function droneImageryRectangleLayoutTable(generated_polygons, plot_polygons_layout_assignment_info, plot_polygons_layout_assignment_table, plot_polygons_generate_assignment_button, plot_polygon_assignment_submit_button) {
        var html = '<hr><div class="well well-sm"><h2>Assign Plot Polygons to Field Trial Entities</h2>';
        html = html + '<div class="panel panel-default"><div class="panel-body"><div class="form form-horizontal">';
        html = html + '<div class="row"><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Location of First Plot (e.g. plot number 1): </label><div class="col-sm-6"><select class="form-control" id="drone_imagery_plot_polygons_first_plot_start" name="drone_imagery_plot_polygons_first_plot_start"><option value="top_left">Top Left</option><option value="top_right">Top Right</option><option value="bottom_left" disabled>Bottom Left</option><option value="bottom_right" disabled>Bottom Right</option></select></div></div></div><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Second Plot Follows First Plot Going: </label><div class="col-sm-6"><select class="form-control" id="drone_imagery_plot_polygons_second_plot_follows" name="drone_imagery_plot_polygons_second_plot_follows"><option value="right">Right</option><option value="up">Up</option><option value="down">Down</option><option value="left">Left</option></select></div></div></div></div>';
        html = html + '<div class="row"><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Plot Number Orientation: </label><div class="col-sm-6"><select class="form-control" id="drone_imagery_plot_polygons_plot_orientation" name="drone_imagery_plot_polygons_plot_orientation"><option value="serpentine">Serpentine</option><option value="zigzag">Zigzag (Not Serpentine)</option></select></div></div></div></div>';
        html = html + '</div></div></div></div>';
        //html = html + '<table class="table table-borders table-hover" id="'+plot_polygons_layout_assignment_table+'"><thead><tr><th>Generated Number</th><th>Field Trial Observation Unit</th></tr></thead><tbody>';
        //for (key in generated_polygons) {
        //    html = html + '<tr><td>' + key + '</td><td><input class="form-control" type="text" name="drone_imagery_plot_polygons_autocomplete" data-generated_polygon_key="'+key+'"/></td></tr>';
        //}
        //html = html + '</tbody></table>';
        html = html + '<button class="btn btn-primary" id="'+plot_polygons_generate_assignment_button+'">Generate Assignments (Does Not Save)</button>&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" name="'+plot_polygon_assignment_submit_button+'">Finish and Save Polygons To Plots</button></div>';
        jQuery('#'+plot_polygons_layout_assignment_info).html(html);
        jQuery('#'+plot_polygons_layout_assignment_table).DataTable({'paging':false});

        jQuery('input[name=drone_imagery_plot_polygons_autocomplete]').autocomplete({
            source: drone_imagery_plot_polygons_available_stock_names
        });
    }

    function droneImageryDrawLayoutTable(response, plot_polygons, layout_div_id, layout_table_div_id) {
        var output = response.output;
        var header = output[0];
        var html = '<table class="table table-borders table-hover" id="'+layout_table_div_id+'"><thead><tr>';
        for (var i=0; i<header.length; i++){
            html = html + '<td>'+header[i]+'</td>';
        }
        html = html + '<td>Polygon Assigned</td>';
        html = html + '</tr></thead><tbody>';
        for (var i=1; i<output.length; i++){
            html = html + '<tr>';
            for (var j=0; j<output[i].length; j++){
                html = html + '<td>'+output[i][j]+'</td>';
            }
            if (output[i][0] in plot_polygons && plot_polygons[output[i][0]] != undefined){
                html = html + '<td>Yes</td>';
            } else {
                html = html + '<td></td>';
            }
            html = html + '</tr>';
        }
        html = html + '</tbody></table>';
        jQuery('#'+layout_div_id).html(html);
        jQuery('#'+layout_table_div_id).DataTable();
    }

    //
    //Remove Background Histogram
    //

    var removeBackgroundHistogramImg;
    var removeBackgroundDisplayImg;
    var removeBackgroundThresholdPeak1;
    var removeBackgroundThresholdPeak1pixels;
    var removeBackgroundThresholdPeak2;
    var removeBackgroundThresholdPeak2pixels;
    var removeBackgroundThresholdValue;
    var remove_background_denoised_stitched_image_id;
    var remove_background_current_image_id;
    var remove_background_current_image_type;
    var remove_background_drone_run_band_project_id;

    jQuery(document).on('click', 'button[name=project_drone_imagery_remove_background]', function(){
        showManageDroneImagerySection('manage_drone_imagery_remove_background_div');

        remove_background_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        remove_background_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        remove_background_current_image_id = jQuery(this).data('remove_background_current_image_id');
        remove_background_current_image_type = jQuery(this).data('remove_background_current_image_type');

        showRemoveBackgroundHistogramStart(remove_background_current_image_id, 'drone_imagery_remove_background_original', 'drone_imagery_remove_background_histogram_div', 'manage_drone_imagery_remove_background_load_div');
    });

    function showRemoveBackgroundHistogramStart(remove_background_current_image_id, canvas_div_id, histogram_canvas_div_id, load_div_id) {
        jQuery.ajax({
            url : '/api/drone_imagery/get_image?image_id='+remove_background_current_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                removeBackgroundDisplayImg = canvas;
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);

                    var src = cv.imread(canvas_div_id);
                    cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
                    var srcVec = new cv.MatVector();
                    srcVec.push_back(src);
                    var accumulate = false;
                    var channels = [0];
                    var histSize = [256];
                    var ranges = [0, 255];
                    var hist = new cv.Mat();
                    var mask = new cv.Mat();
                    var color = new cv.Scalar(255, 255, 255);
                    var scale = 3;
                    var hist_height = src.rows/2;

                    cv.calcHist(srcVec, channels, mask, hist, histSize, ranges, accumulate);
                    var result = cv.minMaxLoc(hist, mask);
                    var max = result.maxVal;
                    var dst = new cv.Mat.zeros(hist_height, histSize[0] * scale, cv.CV_8UC3);
                    // draw histogram
                    for (let i = 0; i < histSize[0]; i++) {
                        var binVal = hist.data32F[i] * hist_height / max;
                        var point1 = new cv.Point(i * scale, hist_height - 1);
                        var point2 = new cv.Point((i + 1) * scale - 1, hist_height - binVal);
                        cv.rectangle(dst, point1, point2, color, cv.FILLED);
                    }
                    cv.imshow(histogram_canvas_div_id, dst);
                    src.delete(); dst.delete(); srcVec.delete(); mask.delete(); hist.delete();

                    removeBackgroundHistogramImg = document.getElementById(histogram_canvas_div_id);
                    removeBackgroundHistogramImg.onmousemove = GetCoordinatesRemoveBackgrounHistogram;
                    removeBackgroundHistogramImg.onmousedown = GetCoordinatesRemoveBackgrounHistogramDrawLine;

                    jQuery('#'+load_div_id).hide();

                };
                image.src = response.image_url;

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    jQuery('#drone_imagery_remove_background_find_minimum').click(function(){
        if (!removeBackgroundThresholdPeak1 || !removeBackgroundThresholdPeak2) {
            alert('Please click on the two right-most peaks in the histogram first!');
        } else {
            showRemoveBackgroundHistogramMinimum(remove_background_current_image_id, 'drone_imagery_remove_background_original', 'drone_imagery_remove_background_histogram_div');
        }
    });

    function showRemoveBackgroundHistogramMinimum(remove_background_current_image_id, canvas_div_id, histogram_canvas_div_id) {
        jQuery.ajax({
            url : '/api/drone_imagery/get_image?image_id='+remove_background_current_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);

                    var src = cv.imread(canvas_div_id);
                    cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
                    var srcVec = new cv.MatVector();
                    srcVec.push_back(src);
                    var accumulate = false;
                    var channels = [0];
                    var histSize = [256];
                    var ranges = [0, 255];
                    var hist = new cv.Mat();
                    var mask = new cv.Mat();
                    var color = new cv.Scalar(255, 255, 255);
                    var scale = 3;
                    var hist_height = src.rows/2;

                    cv.calcHist(srcVec, channels, mask, hist, histSize, ranges, accumulate);
                    var result = cv.minMaxLoc(hist, mask);
                    var max = result.maxVal;
                    var dst = new cv.Mat.zeros(hist_height, histSize[0] * scale, cv.CV_8UC3);
                    // draw histogram
                    var minimum_x_val = 0;
                    var minimum_x_val_pix = 0;
                    var minimum_y_val = 1000000000000000000000000000;

                    if (removeBackgroundThresholdPeak1pixels > removeBackgroundThresholdPeak2pixels) {
                        var removeBackgroundThresholdPeak1pixels_original = removeBackgroundThresholdPeak1pixels;
                        removeBackgroundThresholdPeak1pixels = removeBackgroundThresholdPeak2pixels;
                        removeBackgroundThresholdPeak2pixels = removeBackgroundThresholdPeak1pixels_original;
                    }

                    for (let i = 0; i < histSize[0]; i++) {
                        var binVal = hist.data32F[i] * hist_height / max;

                        var x_start = i * scale;
                        if (x_start >= removeBackgroundThresholdPeak1pixels && x_start <= removeBackgroundThresholdPeak2pixels){
                            //console.log('x: '+i.toString()+' y: '+binVal.toString());
                            if (binVal < minimum_y_val) {
                                minimum_y_val = binVal;
                                minimum_x_val = i;
                                minimum_x_val_pix = x_start;
                            }
                        }

                        var point1 = new cv.Point(x_start, hist_height - 1);
                        var point2 = new cv.Point((i + 1) * scale - 1, hist_height - binVal);
                        cv.rectangle(dst, point1, point2, color, cv.FILLED);
                    }
                    cv.imshow('drone_imagery_remove_background_histogram_div', dst);
                    src.delete(); dst.delete(); srcVec.delete(); mask.delete(); hist.delete();

                    removeBackgroundHistogramImg = document.getElementById(histogram_canvas_div_id);
                    removeBackgroundHistogramImg.onmousemove = GetCoordinatesRemoveBackgrounHistogram;
                    removeBackgroundHistogramImg.onmousedown = GetCoordinatesRemoveBackgrounHistogramDrawLine;

                    jQuery('div[name="drone_imagery_remove_background_threshold"]').html('<h5>Selected Threshold Value: '+ minimum_x_val );

                    removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, removeBackgroundThresholdPeak1pixels, removeBackgroundHistogramImg.height, '#ff0000');
                    removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, removeBackgroundThresholdPeak2pixels, removeBackgroundHistogramImg.height, '#ff0000');
                    removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, minimum_x_val_pix, removeBackgroundHistogramImg.height, '#0000ff');

                    removeBackgroundThresholdValue = minimum_x_val;

                    removeBackgroundHistogramImgReDraw();
                };
                image.src = response.image_url;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    jQuery('#drone_imagery_remove_background_start_over').click(function(){
        removeBackgroundThresholdPeak1 = undefined;
        removeBackgroundThresholdPeak2 = undefined;
        removeBackgroundThresholdPeak1pixels = undefined;
        removeBackgroundThresholdPeak2pixels = undefined;

        showRemoveBackgroundHistogramStart(remove_background_current_image_id, 'drone_imagery_remove_background_original', 'drone_imagery_remove_background_histogram_div', 'manage_drone_imagery_remove_background_load_div');
    });

    function removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, position, image_height, color) {
        var ctx = removeBackgroundHistogramImg.getContext("2d");
        ctx.beginPath();
        ctx.moveTo(position,0);
        ctx.lineTo(position, image_height);
        ctx.strokeStyle = color;
        ctx.stroke();
    }

    function removeBackgroundHistogramImgReDraw() {
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/remove_background_display',
            dataType: "json",
            data: {
                'image_id': remove_background_current_image_id,
                'drone_run_band_project_id': remove_background_drone_run_band_project_id,
                'lower_threshold': removeBackgroundThresholdValue,
                'upper_threshold': '255',
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }

                var canvas = removeBackgroundDisplayImg;
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                };
                image.src = response.removed_background_image_url;
            },
            error: function(response){
                alert('Error saving removed background display image!')
            }
        });
    }

    function GetCoordinatesRemoveBackgrounHistogram(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(removeBackgroundHistogramImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];

        jQuery('div[name="drone_imagery_remove_background_threshold_current"]').html('<h5>Current Mouse Value: '+ (((PosX+1)/3)-1) );
    }

    function GetCoordinatesRemoveBackgrounHistogramDrawLine(e) {
        var PosX = 0;
        var PosY = 0;
        var image_width = removeBackgroundHistogramImg.width;
        var image_height = removeBackgroundHistogramImg.height;

        var ImgPos;
        ImgPos = FindPosition(removeBackgroundHistogramImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];

        if (!removeBackgroundThresholdPeak1 || !removeBackgroundThresholdPeak2) {
            removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, PosX, image_height, '#ff0000');

            var threshold_value = Math.round( (((PosX+1)/3)-1) );
            if (removeBackgroundThresholdPeak1) {
                removeBackgroundThresholdPeak2 = threshold_value;
                removeBackgroundThresholdPeak2pixels = PosX;
            } else {
                removeBackgroundThresholdPeak1 = threshold_value;
                removeBackgroundThresholdPeak1pixels = PosX;
            }
        }
    }

    jQuery('#drone_imagery_remove_background_submit').click(function(){
        manage_drone_imagery_remove_background_threshold_save(remove_background_current_image_id, remove_background_current_image_type, remove_background_drone_run_band_project_id, removeBackgroundThresholdValue, '255');
    });

    jQuery('#drone_imagery_remove_background_defined_submit').click(function(){
        var remove_background_drone_run_band_lower_threshold = jQuery('#drone_imagery_remove_background_lower_threshold').val();
        var remove_background_drone_run_band_upper_threshold = jQuery('#drone_imagery_remove_background_upper_threshold').val();
        manage_drone_imagery_remove_background_threshold_save(remove_background_current_image_id, remove_background_current_image_type, remove_background_drone_run_band_project_id, remove_background_drone_run_band_lower_threshold, remove_background_drone_run_band_upper_threshold);
    });

    function calculateThresholdPercentageValues(canvas_div_id, drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage) {
        var src = cv.imread(canvas_div_id);
        cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
        var srcVec = new cv.MatVector();
        srcVec.push_back(src);
        var total_pixels = src.cols * src.rows;
        var accumulate = false;
        var channels = [0];
        var histSize = [256];
        var ranges = [0, 255];
        var hist = new cv.Mat();
        var mask = new cv.Mat();

        cv.calcHist(srcVec, channels, mask, hist, histSize, ranges, accumulate);
        var summing = 0;
        var drone_imagery_remove_background_lower_percentage_threshold;
        var drone_imagery_remove_background_upper_percentage_threshold;
        for (let i = 0; i < histSize[0]; i++) {
            var binVal = hist.data32F[i];
            summing = summing + binVal;
            var percentage = summing / total_pixels;
            if (percentage >= drone_imagery_remove_background_lower_percentage) {
                drone_imagery_remove_background_lower_percentage_threshold = i;
                break;
            }
        }
        summing = 0;
        for (let i = 0; i < histSize[0]; i++) {
            var binVal = hist.data32F[i];
            summing = summing + binVal;
            var percentage = summing / total_pixels;
            if (percentage >= 1-drone_imagery_remove_background_upper_percentage) {
                drone_imagery_remove_background_upper_percentage_threshold = i;
                break;
            }
        }
        return [drone_imagery_remove_background_lower_percentage_threshold*100, drone_imagery_remove_background_upper_percentage_threshold*100];
    }

    jQuery('#drone_imagery_remove_background_defined_percentage_submit').click(function(){
        var drone_imagery_remove_background_lower_percentage = Number(jQuery('#drone_imagery_remove_background_lower_threshold_percentage').val())/100;
        var drone_imagery_remove_background_upper_percentage = Number(jQuery('#drone_imagery_remove_background_upper_threshold_percentage').val())/100;

        var threshold_value_return = calculateThresholdPercentageValues('drone_imagery_remove_background_original', drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage);

        manage_drone_imagery_remove_background_threshold_save(remove_background_current_image_id, remove_background_current_image_type, remove_background_drone_run_band_project_id, threshold_value_return[0], threshold_value_return[1]);
    });

    function manage_drone_imagery_remove_background_threshold_save(image_id, image_type, drone_run_band_project_id, lower_threshold, upper_threshold){
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/remove_background_save',
            dataType: "json",
            data: {
                'image_id': image_id,
                'image_type': image_type,
                'drone_run_band_project_id': drone_run_band_project_id,
                'lower_threshold': lower_threshold,
                'upper_threshold': upper_threshold
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }

                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving removed background image!')
            }
        });
    }

    //
    //Calculate Phenotypes JS
    //

    var manage_drone_imagery_calculate_phenotypes_drone_run_id;
    var manage_drone_imagery_calculate_phenotypes_drone_run_band_id;
    var manage_drone_imagery_calculate_phenotypes_drone_run_band_type;
    var manage_drone_imagery_calculate_phenotypes_plot_polygons_type;
    var manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id = '';

    jQuery(document).on('click', 'button[name=project_drone_imagery_get_phenotypes]', function() {
        showManageDroneImagerySection('manage_drone_imagery_calculate_phenotypes_div');

        manage_drone_imagery_calculate_phenotypes_drone_run_id = jQuery(this).data('drone_run_project_id');
        manage_drone_imagery_calculate_phenotypes_drone_run_band_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_calculate_phenotypes_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');
        manage_drone_imagery_calculate_phenotypes_plot_polygons_type = jQuery(this).data('plot_polygons_type');
    });

    jQuery('#drone_imagery_calculate_phenotypes_sift').click(function(){

        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/calculate_phenotypes?method=sift',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                    return;
                }

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Unit</th><th>SIFT Features Image</th></tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td></tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_sift').html(html);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating sift features!')
            }
        });

    });

    jQuery('#drone_imagery_calculate_phenotypes_orb').click(function(){

        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/calculate_phenotypes?method=orb',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                    return;
                }

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Unit</th><th>ORB Features Image</th></tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td></tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_orb').html(html);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating ORB features!')
            }
        });

    });

    jQuery('#drone_imagery_calculate_phenotypes_surf').click(function(){

        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/calculate_phenotypes?method=surf',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                    return;
                }

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Unit</th><th>SURF Features Image</th></tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td></tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_surf').html(html);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating surf features!')
            }
        });

    });

    jQuery('#drone_imagery_calculate_phenotypes_zonal_stats').click(function(){

        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/get_weeks_after_planting_date?drone_run_project_id='+manage_drone_imagery_calculate_phenotypes_drone_run_id,
            dataType: "json",
            beforeSend: function (){
                jQuery('#working_modal').modal('show');
            },
            success: function(response){
                jQuery('#working_modal').modal('hide');
                console.log(response);
                if (response.error) {
                    alert(response.error);
                }
                get_select_box('ontology_children','drone_imagery_calculate_phenotypes_zonal_stats_time_select_div', {'selectbox_id':'drone_imagery_calculate_phenotypes_zonal_stats_time_select', 'selectbox_name':'drone_imagery_calculate_phenotypes_zonal_stats_time_select', 'empty':1, 'rel_cvterm':'is_a', 'rel_cv':'relationship', 'parent_node_cvterm':'time of year|TIME:0000005', 'selected':response.time_ontology_cvterm_id });

                var html = "<center><b>Field Trial Planting Date</b>: "+response.planting_date+"<br/><b>Drone Run Date</b>: "+response.drone_run_date+"<br/><b>Number of Weeks Difference</b>: "+response.rounded_time_difference_weeks+"<br/><b>Number of Weeks Ontology Term</b>: "+response.time_ontology_term+"<br/></center>";
                jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_week_term_div').html(html);
                if (response.time_ontology_cvterm_id) {
                    manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id = response.time_ontology_cvterm_id;
                }
            },
            error: function(response){
                alert('Error getting time terms!');
                jQuery('#working_modal').modal('hide');
            }
        });
        
        jQuery('#drone_imagery_calc_phenotypes_zonal_channel_dialog').modal('show');
    });

    jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_channel_select').click(function(){
        if (manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id == '') {
            manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id = jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_time_select').val();
        }

        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/calculate_phenotypes?method=zonal',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'time_cvterm_id': manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type,
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                    return false;
                }

                var html = '<table class="table table-bordered table-hover" id="manage_drone_imagery_zonal_stats_table"><thead><tr><th>Observation Unit</th><th>Image</th>';
                for (var i=0; i<response.result_header.length; i++) {
                    html = html + '<th>'+response.result_header[i]+'</th>';
                }
                html = html + '</tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td>';
                    for (var j=0; j<response.results[i].result.length; j++){
                        html = html + '<td>'+response.results[i].result[j]+'</td>';
                    }
                    html = html + '</tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_zonal_stats').html(html);
                jQuery('#manage_drone_imagery_zonal_stats_table').DataTable();

                jQuery('#drone_imagery_calc_phenotypes_zonal_channel_dialog').modal('hide');
                return false;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating zonal stats!')
            }
        });
    });

    //
    //RGB/3band Image Vegetative Index
    //

    var manage_drone_imagery_vi_rgb_drone_run_band_project_id;
    var manage_drone_imagery_vi_rgb_denoised_stitched_image_id;
    var manage_drone_imagery_vi_drone_run_band_type;
    var manage_drone_imagery_vi_selected_index;
    var manage_drone_imagery_vi_selected_image_type;

    jQuery(document).on('click', 'button[name="project_drone_imagery_rgb_vegetative"]', function(){
        manage_drone_imagery_vi_rgb_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_vi_rgb_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        manage_drone_imagery_vi_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');

        showManageDroneImagerySection('manage_drone_imagery_vegetative_index_div');

        jQuery('#manage_drone_imagery_vegetative_index_tgi_rgb_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_tgi_bgr_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_vari_rgb_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_vari_bgr_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_ndvi_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_ndre_div').hide();
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_3_band_bgr_vegetative"]', function(){
        manage_drone_imagery_vi_rgb_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_vi_rgb_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        manage_drone_imagery_vi_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');

        showManageDroneImagerySection('manage_drone_imagery_vegetative_index_div');

        jQuery('#manage_drone_imagery_vegetative_index_tgi_rgb_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_tgi_bgr_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_vari_rgb_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_vari_bgr_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_ndvi_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_ndre_div').hide();
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_3_band_nrn_vegetative"]', function(){
        manage_drone_imagery_vi_rgb_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_vi_rgb_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        manage_drone_imagery_vi_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');

        showManageDroneImagerySection('manage_drone_imagery_vegetative_index_div');

        jQuery('#manage_drone_imagery_vegetative_index_tgi_rgb_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_tgi_bgr_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_vari_rgb_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_vari_bgr_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_ndvi_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_ndre_div').hide();
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_3_band_nren_vegetative"]', function(){
        manage_drone_imagery_vi_rgb_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_vi_rgb_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        manage_drone_imagery_vi_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');

        showManageDroneImagerySection('manage_drone_imagery_vegetative_index_div');

        jQuery('#manage_drone_imagery_vegetative_index_tgi_rgb_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_tgi_bgr_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_vari_rgb_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_vari_bgr_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_ndvi_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_ndre_div').show();
    });

    jQuery('#drone_imagery_vegetative_index_TGI_bgr').click(function(){
        manage_drone_imagery_vi_selected_index = 'TGI';
        manage_drone_imagery_vi_selected_image_type = 'BGR';
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1, manage_drone_imagery_vi_selected_image_type);
    });

    jQuery('#drone_imagery_vegetative_index_TGI_rgb').click(function(){
        manage_drone_imagery_vi_selected_index = 'TGI';
        manage_drone_imagery_vi_selected_image_type = 'BGR';
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1, manage_drone_imagery_vi_selected_image_type);
    });

    jQuery('#drone_imagery_vegetative_index_VARI_bgr').click(function(){
        manage_drone_imagery_vi_selected_index = 'VARI';
        manage_drone_imagery_vi_selected_image_type = 'BGR';
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1, manage_drone_imagery_vi_selected_image_type);
    });

    jQuery('#drone_imagery_vegetative_index_VARI_rgb').click(function(){
        manage_drone_imagery_vi_selected_index = 'VARI';
        manage_drone_imagery_vi_selected_image_type = 'BGR';
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1, manage_drone_imagery_vi_selected_image_type);
    });

    jQuery('#drone_imagery_vegetative_index_NDVI').click(function(){
        manage_drone_imagery_vi_selected_index = 'NDVI';
        manage_drone_imagery_vi_selected_image_type = 'NRN';
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1, manage_drone_imagery_vi_selected_image_type);
    });

    jQuery('#drone_imagery_vegetative_index_NDRE').click(function(){
        manage_drone_imagery_vi_selected_index = 'NDRE';
        manage_drone_imagery_vi_selected_image_type = 'NReN';
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1, manage_drone_imagery_vi_selected_image_type);
    });

    jQuery('#drone_imagery_rgb_vegetative_index_submit').click(function(){
        getVegetativeIndex('calculate_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 0, manage_drone_imagery_vi_selected_image_type);
    });

    function getVegetativeIndex(url_part, image_id, drone_run_band_project_id, drone_run_band_project_type, index, view_only, manage_drone_imagery_vi_selected_image_type) {
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/'+url_part,
            dataType: "json",
            data: {
                'image_id': image_id,
                'drone_run_band_project_id': drone_run_band_project_id,
                'vegetative_index': index,
                'drone_run_band_project_type': drone_run_band_project_type,
                'view_only': view_only,
                'image_type': manage_drone_imagery_vi_selected_image_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                if (view_only == 1) {
                    var canvas = document.getElementById('drone_imagery_vegetative_index_original_stitched_div');
                    ctx = canvas.getContext('2d');
                    var image = new Image();
                    image.onload = function () {
                        canvas.width = this.naturalWidth;
                        canvas.height = this.naturalHeight;
                        ctx.drawImage(this, 0, 0);
                    };
                    image.src = response.index_image_url;
                } else {
                    location.reload();
                }
            },
            error: function(response){
                alert('Error getting vegetative index!')
            }
        });
    }

    //
    // Apply Masks From Background Removed Vegetative Index to Denoised Image
    //

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_tgi_removed_background_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('background_removed_tgi_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_thresholded_tgi_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_vari_removed_background_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('background_removed_vari_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_thresholded_vari_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_ndvi_removed_background_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('background_removed_ndvi_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_thresholded_ndvi_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_ndre_removed_background_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('background_removed_ndre_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_thresholded_ndre_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_tgi_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('tgi_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_tgi_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_vari_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('vari_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_vari_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_ndvi_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('ndvi_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_ndvi_mask_original');
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_ndre_mask_to_denoised_image"]', function(){
        drone_imagery_mask_remove_background(jQuery(this).data('denoised_stitched_image_id'), jQuery(this).data('ndre_stitched_image_id'), jQuery(this).data('drone_run_band_project_id'), 'denoised_background_removed_ndre_mask_original');
    });

    function drone_imagery_mask_remove_background(image_id, mask_image_id, drone_run_band_project_id, mask_type) {
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/mask_remove_background',
            dataType: "json",
            data: {
                'image_id': image_id,
                'mask_image_id': mask_image_id,
                'drone_run_band_project_id': drone_run_band_project_id,
                'mask_type': mask_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                alert('Error removing background using mask of vegetative index!' + mask_type);
            }
        });
    }

    //
    // Run and save Fourier Transform HPF30
    //

    var manage_drone_imagery_ft_hpf30_drone_run_band_project_id = '';
    var manage_drone_imagery_ft_hpf30_image_id = '';
    var manage_drone_imagery_ft_hpf30_drone_run_band_type = '';
    var manage_drone_imagery_ft_hpf30_selected_image_type = '';

    jQuery(document).on('click', 'button[name="project_drone_imagery_fourier_transform_hpf30"]', function(){
        manage_drone_imagery_ft_hpf30_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_ft_hpf30_image_id = jQuery(this).data('image_id');
        manage_drone_imagery_ft_hpf30_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');
        manage_drone_imagery_ft_hpf30_selected_image_type = jQuery(this).data('selected_image_type');
        getFourierTransform(30, manage_drone_imagery_ft_hpf30_image_id, manage_drone_imagery_ft_hpf30_drone_run_band_project_id, manage_drone_imagery_ft_hpf30_drone_run_band_type, manage_drone_imagery_ft_hpf30_selected_image_type, 'frequency');
    });

    function getFourierTransform(high_pass_filter, image_id, drone_run_band_project_id, drone_run_band_project_type, selected_image_type, high_pass_filter_type) {
        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/calculate_fourier_transform',
            dataType: "json",
            data: {
                'image_id': image_id,
                'drone_run_band_project_id': drone_run_band_project_id,
                'drone_run_band_project_type': drone_run_band_project_type,
                'high_pass_filter': high_pass_filter,
                'high_pass_filter_type': high_pass_filter_type,
                'image_type': selected_image_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error getting fourier transform!')
            }
        });
    }

    //
    // Merge bands into single image
    //

    var drone_imagery_merge_channels_drone_run_project_id;
    var drone_imagery_merge_channels_drone_run_project_name;
    jQuery(document).on('click', 'button[name="project_drone_imagery_merge_channels"]', function() {
        drone_imagery_merge_channels_drone_run_project_id = jQuery(this).data('drone_run_project_id');
        drone_imagery_merge_channels_drone_run_project_name = jQuery(this).data('drone_run_project_name');

        jQuery('#drone_imagery_merge_channels_dialog').modal('show');

        get_select_box('drone_imagery_drone_run_band','drone_imagery_merge_bands_band1_select', {'id':'drone_run_merge_band_select_1', 'name':'drone_run_merge_band_select_1', 'empty':1, 'drone_run_project_id':drone_imagery_merge_channels_drone_run_project_id });
        get_select_box('drone_imagery_drone_run_band','drone_imagery_merge_bands_band2_select', {'id':'drone_run_merge_band_select_2', 'name':'drone_run_merge_band_select_2', 'empty':1, 'drone_run_project_id':drone_imagery_merge_channels_drone_run_project_id });
        get_select_box('drone_imagery_drone_run_band','drone_imagery_merge_bands_band3_select', {'id':'drone_run_merge_band_select_3', 'name':'drone_run_merge_band_select_3', 'empty':1, 'drone_run_project_id':drone_imagery_merge_channels_drone_run_project_id });
    });

    jQuery('#drone_imagery_merge_bands_submit').click(function(){
        var band_1_drone_run_band_project_id = jQuery('#drone_run_merge_band_select_1').val();
        var band_2_drone_run_band_project_id = jQuery('#drone_run_merge_band_select_2').val();
        var band_3_drone_run_band_project_id = jQuery('#drone_run_merge_band_select_3').val();
        var merged_image_type = jQuery('#drone_run_merge_image_type').val();
        if (merged_image_type == '') {
            alert('Please select a merged image type first!');
            return false;
        }

        jQuery.ajax({
            type: 'POST',
            url: '/api/drone_imagery/merge_bands',
            dataType: "json",
            data: {
                'band_1_drone_run_band_project_id': band_1_drone_run_band_project_id,
                'band_2_drone_run_band_project_id': band_2_drone_run_band_project_id,
                'band_3_drone_run_band_project_id': band_3_drone_run_band_project_id,
                'drone_run_project_id': drone_imagery_merge_channels_drone_run_project_id,
                'drone_run_project_name': drone_imagery_merge_channels_drone_run_project_name,
                'merged_image_type' : merged_image_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error merging bands!')
            }
        });
    });

    //
    // Delete drone run
    //

    var manage_drone_imagery_delete_drone_run_project_id;
    jQuery(document).on('click', 'button[name="project_drone_imagery_delete_drone_run"]', function(){
        manage_drone_imagery_delete_drone_run_project_id = jQuery(this).data('drone_run_project_id');
        jQuery('#drone_imagery_delete_drone_run_dialog').modal('show');
    });

    jQuery('#drone_imagery_delete_drone_run_confirm').click(function(){
        jQuery.ajax({
            type: 'GET',
            url: '/api/drone_imagery/delete_drone_run?drone_run_project_id='+manage_drone_imagery_delete_drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }
                if(response.success) {
                    alert('Drone run deleted successfully!');
                }
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error deleting drone run!')
            }
        });
    });

    function showManageDroneImagerySection(section_div_id) {
        console.log(section_div_id);
        if (section_div_id == 'manage_drone_imagery_crop_div') {
            jQuery('#manage_drone_imagery_crop_div').show();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_top_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').show();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_plot_polygons_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').show();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_calculate_phenotypes_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').show();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_remove_background_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').show();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_rotate_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').show();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_vegetative_index_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').show();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_standard_process_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').show();
            jQuery('#manage_drone_imagery_loading_div').hide();
        } else if (section_div_id == 'manage_drone_imagery_loading_div'){
            jQuery('#manage_drone_imagery_crop_div').hide();
            jQuery('#manage_drone_imagery_top_div').hide();
            jQuery('#manage_drone_imagery_plot_polygons_div').hide();
            jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
            jQuery('#manage_drone_imagery_remove_background_div').hide();
            jQuery('#manage_drone_imagery_rotate_div').hide();
            jQuery('#manage_drone_imagery_vegetative_index_div').hide();
            jQuery('#manage_drone_imagery_standard_process_div').hide();
            jQuery('#manage_drone_imagery_loading_div').show();
        }
        window.scrollTo(0,0);
    }

});

</script>
