package CXGN::Transformation::AddAutogeneratedNameInfo;

=head1 NAME

CXGN::Transformation::AddAutogeneratedNameInfo - a module to add autogenerated name metadata.

=head1 USAGE


=head1 DESCRIPTION


=head1 AUTHORS

Titima Tantikanjana (tt15@cornell.edu)

=cut

use Moose;
use MooseX::FollowPBP;
use Moose::Util::TypeConstraints;
use Try::Tiny;
use SGN::Model::Cvterm;
use Data::Dumper;
use JSON;


has 'schema' => (
    is => 'rw',
    isa => 'DBIx::Class::Schema',
	predicate => 'has_schema',
	required => 1,
);

has 'dbh' => (
    is  => 'rw',
    predicate => 'has_dbh',
    required => 1,
);

has 'breeding_program_id' => (
    isa =>'Int',
    is => 'rw',
    predicate => 'has_breeding_program_id',
    required => 1,
);

has 'prefix' => (
    isa => 'Str',
    is => 'rw',
    predicate => 'has_prefix',
    required => 1,
);

has 'current_serial_number' => (
    isa => 'Int',
    is => 'rw',
    predicate => 'has_prefix',
    required => 1,
);

#has 'number_of_digits' => (
#    isa => 'Int',
#    is => 'rw',
#    predicate => 'has_number_of_digits',
#);

has 'description' => (
    isa => 'Str',
    is => 'rw',
    predicate => 'has_description',
);

has 'added_by' => (
    isa => 'Int',
    is => 'rw',
    predicate => 'has_added_by',
    required => 1,
);

has 'date' => (
    isa => 'Str',
    is => 'rw',
    predicate => 'has_date',
);


sub add_info {

    my $self = shift;
    my $schema = $self->get_schema();
    my $breeding_program_id = $self->get_breeding_program_id();
    my $prefix = $self->get_prefix();
    my $current_serial_number = $self->get_current_serial_number();
#    my $number_of_digits = $self->get_number_of_digits();
    my $description = $self->get_description();
    my $added_by = $self->get_added_by();;
    my $date = $self->get_date();;

    my $name_metadata_cvterm = SGN::Model::Cvterm->get_cvterm_row($schema, 'autogenerated_name_metadata', 'project_property');

    my $metadata_rs = $schema->resultset("Project::Projectprop")->search({ type_id => $name_metadata_cvterm->cvterm_id });
    my %all_stored_prefixes;
    if ($metadata_rs) {
        while (my $r = $metadata_rs->next()){
            my $program_stored_metadata_string = $r->value();
            my $program_stored_metadata = decode_json $program_stored_metadata_string;
            foreach my $stored_prefix (keys %{$program_stored_metadata}) {
                $all_stored_prefixes{$stored_prefix}++;
            }
        }

        if ($all_stored_prefixes{$prefix}) {
            return {error => "Not saved. This prefix is already stored in the database!\n"};
        }
    }

    my %name_metadata;
    $name_metadata{'current_serial_number'} = $current_serial_number;
#    $name_metadata{'number_of_digits'} = $number_of_digits;
    $name_metadata{'description'} = $description;
    $name_metadata{'added_by'} = $added_by;
    $name_metadata{'date'} = $date;

    my $stored_name_metadata_string;
    my $new_name_metadata_string;
    my $name_metadata_hash = {};

    my $program = $schema->resultset('Project::Project')->find({ project_id => $breeding_program_id});
    if (!$program) {
        return {error => "Breeding Program not found!\n"};
    }

    my $metadata_projectprop_rs = $program->projectprops({type_id => $name_metadata_cvterm->cvterm_id});
    if ($metadata_projectprop_rs->count == 1){
        $stored_name_metadata_string = $metadata_projectprop_rs->first->value();
        $name_metadata_hash = decode_json $stored_name_metadata_string;

        $name_metadata_hash->{$prefix} = \%name_metadata;
        $new_name_metadata_string = encode_json $name_metadata_hash;

        $metadata_projectprop_rs->first->update({value=>$new_name_metadata_string});
    } elsif ($metadata_projectprop_rs->count > 1) {
        return {error => "Error saving metadata!\n"};
    } else {
        $name_metadata_hash->{$prefix} = \%name_metadata;
        $new_name_metadata_string = encode_json $name_metadata_hash;
        $program->create_projectprops({$name_metadata_cvterm->name() => $new_name_metadata_string});
    }

    return {success => 1};

}



#######
1;
#######
